# Generated from GosuParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,132,1306,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,
        3,0,220,8,0,1,0,3,0,223,8,0,1,0,1,0,3,0,227,8,0,1,1,1,1,1,1,3,1,
        232,8,1,3,1,234,8,1,1,2,1,2,4,2,238,8,2,11,2,12,2,239,1,3,1,3,1,
        3,3,3,245,8,3,1,3,3,3,248,8,3,1,3,1,3,3,3,252,8,3,3,3,254,8,3,1,
        4,1,4,1,4,1,4,3,4,260,8,4,1,4,3,4,263,8,4,1,5,1,5,1,5,1,5,1,5,1,
        5,3,5,271,8,5,1,6,1,6,1,6,1,6,5,6,277,8,6,10,6,12,6,280,9,6,1,6,
        3,6,283,8,6,1,6,3,6,286,8,6,1,7,1,7,1,7,1,8,3,8,292,8,8,1,8,1,8,
        1,8,3,8,297,8,8,1,8,1,8,3,8,301,8,8,1,8,1,8,1,8,1,8,5,8,307,8,8,
        10,8,12,8,310,9,8,3,8,312,8,8,1,9,1,9,1,9,1,10,3,10,318,8,10,1,10,
        1,10,1,10,3,10,323,8,10,1,10,1,10,1,10,1,10,5,10,329,8,10,10,10,
        12,10,332,9,10,1,11,1,11,1,11,1,12,3,12,338,8,12,1,12,1,12,1,12,
        3,12,343,8,12,1,12,1,12,1,12,1,12,5,12,349,8,12,10,12,12,12,352,
        9,12,3,12,354,8,12,1,13,1,13,1,13,1,14,3,14,360,8,14,1,14,1,14,1,
        14,3,14,365,8,14,1,14,1,14,1,14,1,14,5,14,371,8,14,10,14,12,14,374,
        9,14,3,14,376,8,14,1,15,1,15,1,15,1,16,3,16,382,8,16,1,16,1,16,1,
        16,1,16,1,16,1,16,5,16,390,8,16,10,16,12,16,393,9,16,3,16,395,8,
        16,1,17,1,17,1,17,1,18,3,18,401,8,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
        22,1,23,1,23,3,23,424,8,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,5,25,436,8,25,10,25,12,25,439,9,25,1,25,3,25,442,8,
        25,1,25,3,25,445,8,25,1,26,1,26,3,26,449,8,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,3,27,460,8,27,1,27,3,27,463,8,27,5,27,465,
        8,27,10,27,12,27,468,9,27,1,28,1,28,3,28,472,8,28,1,28,3,28,475,
        8,28,5,28,477,8,28,10,28,12,28,480,9,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,3,29,489,8,29,1,29,3,29,492,8,29,5,29,494,8,29,10,29,12,
        29,497,9,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,506,8,30,1,30,
        3,30,509,8,30,5,30,511,8,30,10,30,12,30,514,9,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,526,8,31,1,31,3,31,529,8,
        31,5,31,531,8,31,10,31,12,31,534,9,31,1,32,1,32,3,32,538,8,32,1,
        33,1,33,1,33,1,34,1,34,3,34,545,8,34,1,35,1,35,1,35,1,35,1,36,3,
        36,552,8,36,1,36,1,36,1,36,3,36,557,8,36,1,36,1,36,3,36,561,8,36,
        1,36,1,36,1,36,3,36,566,8,36,1,37,3,37,569,8,37,1,37,1,37,1,37,3,
        37,574,8,37,1,37,1,37,1,37,3,37,579,8,37,1,38,1,38,1,39,1,39,5,39,
        585,8,39,10,39,12,39,588,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,608,
        8,40,1,40,3,40,611,8,40,1,40,3,40,614,8,40,1,41,1,41,1,41,1,41,1,
        41,1,41,3,41,622,8,41,1,41,3,41,625,8,41,1,42,1,42,1,42,1,43,1,43,
        1,43,4,43,633,8,43,11,43,12,43,634,1,43,3,43,638,8,43,1,43,3,43,
        641,8,43,1,44,1,44,1,44,3,44,646,8,44,1,44,1,44,1,44,3,44,651,8,
        44,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,3,46,661,8,46,1,47,1,
        47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,
        49,1,49,1,49,1,49,1,49,5,49,682,8,49,10,49,12,49,685,9,49,1,49,1,
        49,1,50,1,50,1,50,5,50,692,8,50,10,50,12,50,695,9,50,1,51,1,51,1,
        51,3,51,700,8,51,1,52,1,52,1,52,1,52,1,52,5,52,707,8,52,10,52,12,
        52,710,9,52,1,52,3,52,713,8,52,1,52,1,52,1,52,3,52,718,8,52,1,53,
        1,53,1,53,1,53,3,53,724,8,53,1,54,3,54,727,8,54,1,54,1,54,1,54,3,
        54,732,8,54,1,54,1,54,3,54,736,8,54,1,55,1,55,1,56,1,56,1,57,1,57,
        1,57,1,57,1,58,1,58,1,58,1,58,3,58,750,8,58,1,58,3,58,753,8,58,1,
        58,1,58,1,58,1,58,3,58,759,8,58,3,58,761,8,58,1,58,1,58,1,58,1,59,
        1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,777,8,60,
        1,61,1,61,1,61,1,62,1,62,1,62,1,63,3,63,786,8,63,1,63,1,63,1,63,
        1,63,1,63,3,63,793,8,63,1,63,1,63,1,63,3,63,798,8,63,1,64,3,64,801,
        8,64,1,64,1,64,1,64,3,64,806,8,64,1,64,1,64,3,64,810,8,64,1,64,3,
        64,813,8,64,1,64,1,64,3,64,817,8,64,1,65,3,65,820,8,65,1,65,1,65,
        1,65,1,65,1,66,1,66,3,66,828,8,66,1,66,1,66,1,66,1,66,5,66,834,8,
        66,10,66,12,66,837,9,66,1,66,1,66,3,66,841,8,66,1,67,1,67,1,67,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,4,67,855,8,67,11,67,12,
        67,856,1,68,1,68,3,68,861,8,68,1,68,1,68,1,68,1,68,5,68,867,8,68,
        10,68,12,68,870,9,68,1,69,1,69,1,69,5,69,875,8,69,10,69,12,69,878,
        9,69,1,70,5,70,881,8,70,10,70,12,70,884,9,70,1,70,3,70,887,8,70,
        1,70,1,70,3,70,891,8,70,1,70,1,70,1,70,3,70,896,8,70,3,70,898,8,
        70,1,70,1,70,3,70,902,8,70,1,71,1,71,3,71,906,8,71,1,71,1,71,1,72,
        1,72,1,72,1,72,5,72,914,8,72,10,72,12,72,917,9,72,1,72,1,72,1,73,
        1,73,1,73,3,73,924,8,73,1,74,1,74,1,74,1,74,5,74,930,8,74,10,74,
        12,74,933,9,74,1,74,1,74,1,75,1,75,1,75,1,75,3,75,941,8,75,3,75,
        943,8,75,1,76,1,76,1,76,3,76,948,8,76,1,77,1,77,1,77,5,77,953,8,
        77,10,77,12,77,956,9,77,1,78,1,78,1,78,5,78,961,8,78,10,78,12,78,
        964,9,78,1,78,1,78,1,78,3,78,969,8,78,1,79,1,79,1,79,1,79,5,79,975,
        8,79,10,79,12,79,978,9,79,3,79,980,8,79,1,79,1,79,1,79,3,79,985,
        8,79,1,80,1,80,1,80,1,80,3,80,991,8,80,1,80,1,80,1,80,3,80,996,8,
        80,1,80,1,80,1,80,3,80,1001,8,80,3,80,1003,8,80,1,81,1,81,1,81,1,
        81,5,81,1009,8,81,10,81,12,81,1012,9,81,3,81,1014,8,81,1,81,1,81,
        1,82,1,82,1,82,3,82,1021,8,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1039,8,84,1,84,
        3,84,1042,8,84,1,84,3,84,1045,8,84,1,84,1,84,1,84,3,84,1050,8,84,
        1,84,1,84,3,84,1054,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,3,84,1065,8,84,1,84,1,84,1,84,1,84,1,84,3,84,1072,8,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1086,
        8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1097,8,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1120,8,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,3,84,1130,8,84,1,84,1,84,1,84,1,84,
        5,84,1136,8,84,10,84,12,84,1139,9,84,1,85,1,85,1,86,1,86,3,86,1145,
        8,86,1,86,1,86,1,87,1,87,3,87,1151,8,87,1,88,1,88,3,88,1155,8,88,
        1,88,4,88,1158,8,88,11,88,12,88,1159,1,89,1,89,3,89,1164,8,89,1,
        90,1,90,3,90,1168,8,90,1,91,1,91,1,91,5,91,1173,8,91,10,91,12,91,
        1176,9,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,1186,8,92,
        10,92,12,92,1189,9,92,1,93,1,93,1,93,5,93,1194,8,93,10,93,12,93,
        1197,9,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,3,95,1206,8,95,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1216,8,95,1,96,1,96,1,96,
        5,96,1221,8,96,10,96,12,96,1224,9,96,1,97,1,97,1,98,4,98,1229,8,
        98,11,98,12,98,1230,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1239,8,99,
        1,100,1,100,5,100,1243,8,100,10,100,12,100,1246,9,100,1,100,1,100,
        1,100,5,100,1251,8,100,10,100,12,100,1254,9,100,1,100,1,100,3,100,
        1258,8,100,1,101,1,101,1,101,3,101,1263,8,101,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,3,102,1273,8,102,1,103,1,103,1,104,
        1,104,3,104,1279,8,104,1,104,1,104,1,105,1,105,1,105,1,105,3,105,
        1287,8,105,1,105,3,105,1290,8,105,1,105,3,105,1293,8,105,1,106,1,
        106,1,107,1,107,3,107,1299,8,107,1,107,1,107,1,108,1,108,1,108,1,
        108,0,1,168,109,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
        150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
        182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
        214,216,0,15,2,0,79,79,107,118,1,0,24,25,2,0,27,27,48,48,2,0,20,
        20,52,52,2,0,36,36,82,83,2,0,52,52,54,54,2,0,50,50,61,61,2,0,96,
        97,101,101,2,0,84,84,96,96,2,0,4,4,59,59,1,0,94,95,4,0,2,2,37,37,
        90,91,98,100,1,0,92,93,16,0,1,1,3,5,11,11,17,17,21,22,27,27,31,31,
        33,34,40,40,42,44,48,49,52,52,54,54,57,57,65,65,119,119,3,0,21,21,
        57,57,67,67,1459,0,219,1,0,0,0,2,228,1,0,0,0,4,237,1,0,0,0,6,253,
        1,0,0,0,8,255,1,0,0,0,10,270,1,0,0,0,12,272,1,0,0,0,14,287,1,0,0,
        0,16,291,1,0,0,0,18,313,1,0,0,0,20,317,1,0,0,0,22,333,1,0,0,0,24,
        337,1,0,0,0,26,355,1,0,0,0,28,359,1,0,0,0,30,377,1,0,0,0,32,381,
        1,0,0,0,34,396,1,0,0,0,36,400,1,0,0,0,38,405,1,0,0,0,40,409,1,0,
        0,0,42,413,1,0,0,0,44,417,1,0,0,0,46,421,1,0,0,0,48,428,1,0,0,0,
        50,432,1,0,0,0,52,446,1,0,0,0,54,466,1,0,0,0,56,478,1,0,0,0,58,495,
        1,0,0,0,60,512,1,0,0,0,62,532,1,0,0,0,64,535,1,0,0,0,66,539,1,0,
        0,0,68,542,1,0,0,0,70,546,1,0,0,0,72,551,1,0,0,0,74,568,1,0,0,0,
        76,580,1,0,0,0,78,582,1,0,0,0,80,613,1,0,0,0,82,615,1,0,0,0,84,626,
        1,0,0,0,86,629,1,0,0,0,88,642,1,0,0,0,90,655,1,0,0,0,92,658,1,0,
        0,0,94,662,1,0,0,0,96,668,1,0,0,0,98,675,1,0,0,0,100,688,1,0,0,0,
        102,699,1,0,0,0,104,701,1,0,0,0,106,719,1,0,0,0,108,726,1,0,0,0,
        110,737,1,0,0,0,112,739,1,0,0,0,114,741,1,0,0,0,116,745,1,0,0,0,
        118,765,1,0,0,0,120,776,1,0,0,0,122,778,1,0,0,0,124,781,1,0,0,0,
        126,785,1,0,0,0,128,800,1,0,0,0,130,819,1,0,0,0,132,827,1,0,0,0,
        134,854,1,0,0,0,136,858,1,0,0,0,138,871,1,0,0,0,140,882,1,0,0,0,
        142,905,1,0,0,0,144,909,1,0,0,0,146,920,1,0,0,0,148,925,1,0,0,0,
        150,942,1,0,0,0,152,947,1,0,0,0,154,949,1,0,0,0,156,968,1,0,0,0,
        158,970,1,0,0,0,160,1002,1,0,0,0,162,1004,1,0,0,0,164,1020,1,0,0,
        0,166,1022,1,0,0,0,168,1064,1,0,0,0,170,1140,1,0,0,0,172,1142,1,
        0,0,0,174,1150,1,0,0,0,176,1157,1,0,0,0,178,1163,1,0,0,0,180,1167,
        1,0,0,0,182,1169,1,0,0,0,184,1177,1,0,0,0,186,1190,1,0,0,0,188,1198,
        1,0,0,0,190,1215,1,0,0,0,192,1217,1,0,0,0,194,1225,1,0,0,0,196,1228,
        1,0,0,0,198,1238,1,0,0,0,200,1257,1,0,0,0,202,1262,1,0,0,0,204,1272,
        1,0,0,0,206,1274,1,0,0,0,208,1276,1,0,0,0,210,1282,1,0,0,0,212,1294,
        1,0,0,0,214,1296,1,0,0,0,216,1302,1,0,0,0,218,220,3,2,1,0,219,218,
        1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,223,3,4,2,0,222,221,
        1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,226,3,10,5,0,225,227,
        5,0,0,1,226,225,1,0,0,0,226,227,1,0,0,0,227,1,1,0,0,0,228,233,5,
        39,0,0,229,231,3,192,96,0,230,232,3,196,98,0,231,230,1,0,0,0,231,
        232,1,0,0,0,232,234,1,0,0,0,233,229,1,0,0,0,233,234,1,0,0,0,234,
        3,1,0,0,0,235,236,5,62,0,0,236,238,3,6,3,0,237,235,1,0,0,0,238,239,
        1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,5,1,0,0,0,241,244,3,
        192,96,0,242,243,5,78,0,0,243,245,5,96,0,0,244,242,1,0,0,0,244,245,
        1,0,0,0,245,247,1,0,0,0,246,248,3,196,98,0,247,246,1,0,0,0,247,248,
        1,0,0,0,248,254,1,0,0,0,249,251,3,8,4,0,250,252,3,196,98,0,251,250,
        1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,241,1,0,0,0,253,249,
        1,0,0,0,254,7,1,0,0,0,255,256,3,192,96,0,256,262,5,105,0,0,257,259,
        3,194,97,0,258,260,3,162,81,0,259,258,1,0,0,0,259,260,1,0,0,0,260,
        263,1,0,0,0,261,263,5,96,0,0,262,257,1,0,0,0,262,261,1,0,0,0,263,
        9,1,0,0,0,264,271,3,14,7,0,265,271,3,18,9,0,266,271,3,30,15,0,267,
        271,3,22,11,0,268,271,3,26,13,0,269,271,3,34,17,0,270,264,1,0,0,
        0,270,265,1,0,0,0,270,266,1,0,0,0,270,267,1,0,0,0,270,268,1,0,0,
        0,270,269,1,0,0,0,271,11,1,0,0,0,272,273,5,103,0,0,273,278,3,194,
        97,0,274,275,5,78,0,0,275,277,3,194,97,0,276,274,1,0,0,0,277,280,
        1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,282,1,0,0,0,280,278,
        1,0,0,0,281,283,3,144,72,0,282,281,1,0,0,0,282,283,1,0,0,0,283,285,
        1,0,0,0,284,286,3,162,81,0,285,284,1,0,0,0,285,286,1,0,0,0,286,13,
        1,0,0,0,287,288,3,16,8,0,288,289,3,38,19,0,289,15,1,0,0,0,290,292,
        3,134,67,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,
        5,10,0,0,294,296,3,194,97,0,295,297,3,144,72,0,296,295,1,0,0,0,296,
        297,1,0,0,0,297,300,1,0,0,0,298,299,5,20,0,0,299,301,3,136,68,0,
        300,298,1,0,0,0,300,301,1,0,0,0,301,311,1,0,0,0,302,303,5,29,0,0,
        303,308,3,136,68,0,304,305,5,77,0,0,305,307,3,136,68,0,306,304,1,
        0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,312,1,
        0,0,0,310,308,1,0,0,0,311,302,1,0,0,0,311,312,1,0,0,0,312,17,1,0,
        0,0,313,314,3,20,10,0,314,315,3,40,20,0,315,19,1,0,0,0,316,318,3,
        134,67,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,320,
        5,17,0,0,320,322,3,194,97,0,321,323,3,144,72,0,322,321,1,0,0,0,322,
        323,1,0,0,0,323,324,1,0,0,0,324,325,5,86,0,0,325,330,3,136,68,0,
        326,327,5,74,0,0,327,329,5,75,0,0,328,326,1,0,0,0,329,332,1,0,0,
        0,330,328,1,0,0,0,330,331,1,0,0,0,331,21,1,0,0,0,332,330,1,0,0,0,
        333,334,3,24,12,0,334,335,3,42,21,0,335,23,1,0,0,0,336,338,3,134,
        67,0,337,336,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,340,5,32,
        0,0,340,342,3,194,97,0,341,343,3,144,72,0,342,341,1,0,0,0,342,343,
        1,0,0,0,343,353,1,0,0,0,344,345,5,20,0,0,345,350,3,136,68,0,346,
        347,5,77,0,0,347,349,3,136,68,0,348,346,1,0,0,0,349,352,1,0,0,0,
        350,348,1,0,0,0,350,351,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,
        353,344,1,0,0,0,353,354,1,0,0,0,354,25,1,0,0,0,355,356,3,28,14,0,
        356,357,3,44,22,0,357,27,1,0,0,0,358,360,3,134,67,0,359,358,1,0,
        0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,5,51,0,0,362,364,3,194,
        97,0,363,365,3,144,72,0,364,363,1,0,0,0,364,365,1,0,0,0,365,375,
        1,0,0,0,366,367,5,20,0,0,367,372,3,136,68,0,368,369,5,77,0,0,369,
        371,3,136,68,0,370,368,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,
        373,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,375,366,1,0,0,0,375,
        376,1,0,0,0,376,29,1,0,0,0,377,378,3,32,16,0,378,379,3,46,23,0,379,
        31,1,0,0,0,380,382,3,134,67,0,381,380,1,0,0,0,381,382,1,0,0,0,382,
        383,1,0,0,0,383,384,5,18,0,0,384,394,3,194,97,0,385,386,5,29,0,0,
        386,391,3,136,68,0,387,388,5,77,0,0,388,390,3,136,68,0,389,387,1,
        0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,395,1,
        0,0,0,393,391,1,0,0,0,394,385,1,0,0,0,394,395,1,0,0,0,395,33,1,0,
        0,0,396,397,3,36,18,0,397,398,3,48,24,0,398,35,1,0,0,0,399,401,3,
        134,67,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,403,
        5,3,0,0,403,404,3,194,97,0,404,37,1,0,0,0,405,406,5,72,0,0,406,407,
        3,54,27,0,407,408,5,73,0,0,408,39,1,0,0,0,409,410,5,72,0,0,410,411,
        3,56,28,0,411,412,5,73,0,0,412,41,1,0,0,0,413,414,5,72,0,0,414,415,
        3,58,29,0,415,416,5,73,0,0,416,43,1,0,0,0,417,418,5,72,0,0,418,419,
        3,60,30,0,419,420,5,73,0,0,420,45,1,0,0,0,421,423,5,72,0,0,422,424,
        3,50,25,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,
        3,54,27,0,426,427,5,73,0,0,427,47,1,0,0,0,428,429,5,72,0,0,429,430,
        3,62,31,0,430,431,5,73,0,0,431,49,1,0,0,0,432,437,3,52,26,0,433,
        434,5,77,0,0,434,436,3,52,26,0,435,433,1,0,0,0,436,439,1,0,0,0,437,
        435,1,0,0,0,437,438,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,440,
        442,5,77,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,
        445,3,196,98,0,444,443,1,0,0,0,444,445,1,0,0,0,445,51,1,0,0,0,446,
        448,3,194,97,0,447,449,3,162,81,0,448,447,1,0,0,0,448,449,1,0,0,
        0,449,53,1,0,0,0,450,460,3,64,32,0,451,460,3,66,33,0,452,460,3,68,
        34,0,453,460,3,128,64,0,454,460,3,130,65,0,455,460,3,14,7,0,456,
        460,3,22,11,0,457,460,3,26,13,0,458,460,3,30,15,0,459,450,1,0,0,
        0,459,451,1,0,0,0,459,452,1,0,0,0,459,453,1,0,0,0,459,454,1,0,0,
        0,459,455,1,0,0,0,459,456,1,0,0,0,459,457,1,0,0,0,459,458,1,0,0,
        0,460,462,1,0,0,0,461,463,3,196,98,0,462,461,1,0,0,0,462,463,1,0,
        0,0,463,465,1,0,0,0,464,459,1,0,0,0,465,468,1,0,0,0,466,464,1,0,
        0,0,466,467,1,0,0,0,467,55,1,0,0,0,468,466,1,0,0,0,469,472,3,64,
        32,0,470,472,3,68,34,0,471,469,1,0,0,0,471,470,1,0,0,0,472,474,1,
        0,0,0,473,475,3,196,98,0,474,473,1,0,0,0,474,475,1,0,0,0,475,477,
        1,0,0,0,476,471,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,
        1,0,0,0,479,57,1,0,0,0,480,478,1,0,0,0,481,489,3,64,32,0,482,489,
        3,68,34,0,483,489,3,128,64,0,484,489,3,14,7,0,485,489,3,22,11,0,
        486,489,3,26,13,0,487,489,3,30,15,0,488,481,1,0,0,0,488,482,1,0,
        0,0,488,483,1,0,0,0,488,484,1,0,0,0,488,485,1,0,0,0,488,486,1,0,
        0,0,488,487,1,0,0,0,489,491,1,0,0,0,490,492,3,196,98,0,491,490,1,
        0,0,0,491,492,1,0,0,0,492,494,1,0,0,0,493,488,1,0,0,0,494,497,1,
        0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,59,1,0,0,0,497,495,1,0,
        0,0,498,506,3,64,32,0,499,506,3,68,34,0,500,506,3,128,64,0,501,506,
        3,14,7,0,502,506,3,22,11,0,503,506,3,26,13,0,504,506,3,30,15,0,505,
        498,1,0,0,0,505,499,1,0,0,0,505,500,1,0,0,0,505,501,1,0,0,0,505,
        502,1,0,0,0,505,503,1,0,0,0,505,504,1,0,0,0,506,508,1,0,0,0,507,
        509,3,196,98,0,508,507,1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,
        505,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,
        61,1,0,0,0,514,512,1,0,0,0,515,526,3,64,32,0,516,526,3,66,33,0,517,
        526,3,68,34,0,518,526,3,128,64,0,519,526,3,130,65,0,520,526,3,14,
        7,0,521,526,3,22,11,0,522,526,3,26,13,0,523,526,3,30,15,0,524,526,
        3,70,35,0,525,515,1,0,0,0,525,516,1,0,0,0,525,517,1,0,0,0,525,518,
        1,0,0,0,525,519,1,0,0,0,525,520,1,0,0,0,525,521,1,0,0,0,525,522,
        1,0,0,0,525,523,1,0,0,0,525,524,1,0,0,0,526,528,1,0,0,0,527,529,
        3,196,98,0,528,527,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,525,
        1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,63,1,
        0,0,0,534,532,1,0,0,0,535,537,3,72,36,0,536,538,3,76,38,0,537,536,
        1,0,0,0,537,538,1,0,0,0,538,65,1,0,0,0,539,540,3,74,37,0,540,541,
        3,76,38,0,541,67,1,0,0,0,542,544,3,126,63,0,543,545,3,76,38,0,544,
        543,1,0,0,0,544,545,1,0,0,0,545,69,1,0,0,0,546,547,3,72,36,0,547,
        548,5,79,0,0,548,549,3,80,40,0,549,71,1,0,0,0,550,552,3,134,67,0,
        551,550,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,554,5,26,0,0,
        554,556,3,194,97,0,555,557,3,144,72,0,556,555,1,0,0,0,556,557,1,
        0,0,0,557,558,1,0,0,0,558,560,5,70,0,0,559,561,3,138,69,0,560,559,
        1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,565,5,71,0,0,563,564,
        5,86,0,0,564,566,3,154,77,0,565,563,1,0,0,0,565,566,1,0,0,0,566,
        73,1,0,0,0,567,569,3,134,67,0,568,567,1,0,0,0,568,569,1,0,0,0,569,
        570,1,0,0,0,570,571,5,11,0,0,571,573,5,70,0,0,572,574,3,138,69,0,
        573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,578,5,71,0,0,
        576,577,5,86,0,0,577,579,3,154,77,0,578,576,1,0,0,0,578,579,1,0,
        0,0,579,75,1,0,0,0,580,581,3,78,39,0,581,77,1,0,0,0,582,586,5,72,
        0,0,583,585,3,80,40,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,1,
        0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,590,5,
        73,0,0,590,79,1,0,0,0,591,608,3,114,57,0,592,608,3,82,41,0,593,608,
        3,86,43,0,594,608,3,90,45,0,595,608,3,112,56,0,596,608,3,110,55,
        0,597,608,3,92,46,0,598,608,3,116,58,0,599,608,3,94,47,0,600,608,
        3,96,48,0,601,608,3,98,49,0,602,608,3,104,52,0,603,608,3,106,53,
        0,604,608,3,108,54,0,605,608,3,78,39,0,606,608,3,168,84,0,607,591,
        1,0,0,0,607,592,1,0,0,0,607,593,1,0,0,0,607,594,1,0,0,0,607,595,
        1,0,0,0,607,596,1,0,0,0,607,597,1,0,0,0,607,598,1,0,0,0,607,599,
        1,0,0,0,607,600,1,0,0,0,607,601,1,0,0,0,607,602,1,0,0,0,607,603,
        1,0,0,0,607,604,1,0,0,0,607,605,1,0,0,0,607,606,1,0,0,0,608,610,
        1,0,0,0,609,611,3,196,98,0,610,609,1,0,0,0,610,611,1,0,0,0,611,614,
        1,0,0,0,612,614,3,196,98,0,613,607,1,0,0,0,613,612,1,0,0,0,614,81,
        1,0,0,0,615,616,5,28,0,0,616,617,5,70,0,0,617,618,3,168,84,0,618,
        619,5,71,0,0,619,621,3,80,40,0,620,622,3,196,98,0,621,620,1,0,0,
        0,621,622,1,0,0,0,622,624,1,0,0,0,623,625,3,84,42,0,624,623,1,0,
        0,0,624,625,1,0,0,0,625,83,1,0,0,0,626,627,5,16,0,0,627,628,3,80,
        40,0,628,85,1,0,0,0,629,630,5,58,0,0,630,640,3,78,39,0,631,633,3,
        88,44,0,632,631,1,0,0,0,633,634,1,0,0,0,634,632,1,0,0,0,634,635,
        1,0,0,0,635,637,1,0,0,0,636,638,3,118,59,0,637,636,1,0,0,0,637,638,
        1,0,0,0,638,641,1,0,0,0,639,641,3,118,59,0,640,632,1,0,0,0,640,639,
        1,0,0,0,641,87,1,0,0,0,642,643,5,9,0,0,643,645,5,70,0,0,644,646,
        5,64,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,650,
        3,194,97,0,648,649,5,86,0,0,649,651,3,154,77,0,650,648,1,0,0,0,650,
        651,1,0,0,0,651,652,1,0,0,0,652,653,5,71,0,0,653,654,3,78,39,0,654,
        89,1,0,0,0,655,656,5,55,0,0,656,657,3,168,84,0,657,91,1,0,0,0,658,
        660,5,47,0,0,659,661,3,168,84,0,660,659,1,0,0,0,660,661,1,0,0,0,
        661,93,1,0,0,0,662,663,5,66,0,0,663,664,5,70,0,0,664,665,3,168,84,
        0,665,666,5,71,0,0,666,667,3,80,40,0,667,95,1,0,0,0,668,669,5,15,
        0,0,669,670,3,80,40,0,670,671,5,66,0,0,671,672,5,70,0,0,672,673,
        3,168,84,0,673,674,5,71,0,0,674,97,1,0,0,0,675,676,5,53,0,0,676,
        677,5,70,0,0,677,678,3,168,84,0,678,679,5,71,0,0,679,683,5,72,0,
        0,680,682,3,100,50,0,681,680,1,0,0,0,682,685,1,0,0,0,683,681,1,0,
        0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,683,1,0,0,0,686,687,5,73,
        0,0,687,99,1,0,0,0,688,689,3,102,51,0,689,693,5,86,0,0,690,692,3,
        80,40,0,691,690,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,694,
        1,0,0,0,694,101,1,0,0,0,695,693,1,0,0,0,696,697,5,8,0,0,697,700,
        3,168,84,0,698,700,5,13,0,0,699,696,1,0,0,0,699,698,1,0,0,0,700,
        103,1,0,0,0,701,702,5,63,0,0,702,712,5,70,0,0,703,708,3,108,54,0,
        704,705,5,77,0,0,705,707,3,108,54,0,706,704,1,0,0,0,707,710,1,0,
        0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,713,1,0,0,0,710,708,1,0,
        0,0,711,713,3,168,84,0,712,703,1,0,0,0,712,711,1,0,0,0,713,714,1,
        0,0,0,714,715,5,71,0,0,715,717,3,78,39,0,716,718,3,118,59,0,717,
        716,1,0,0,0,717,718,1,0,0,0,718,105,1,0,0,0,719,720,5,5,0,0,720,
        723,3,168,84,0,721,722,5,86,0,0,722,724,3,168,84,0,723,721,1,0,0,
        0,723,724,1,0,0,0,724,107,1,0,0,0,725,727,5,22,0,0,726,725,1,0,0,
        0,726,727,1,0,0,0,727,728,1,0,0,0,728,729,5,64,0,0,729,731,3,194,
        97,0,730,732,3,152,76,0,731,730,1,0,0,0,731,732,1,0,0,0,732,735,
        1,0,0,0,733,734,5,79,0,0,734,736,3,168,84,0,735,733,1,0,0,0,735,
        736,1,0,0,0,736,109,1,0,0,0,737,738,5,7,0,0,738,111,1,0,0,0,739,
        740,5,12,0,0,740,113,1,0,0,0,741,742,3,168,84,0,742,743,7,0,0,0,
        743,744,3,168,84,0,744,115,1,0,0,0,745,746,7,1,0,0,746,760,5,70,
        0,0,747,749,3,168,84,0,748,750,3,122,61,0,749,748,1,0,0,0,749,750,
        1,0,0,0,750,761,1,0,0,0,751,753,5,64,0,0,752,751,1,0,0,0,752,753,
        1,0,0,0,753,754,1,0,0,0,754,755,3,194,97,0,755,756,5,30,0,0,756,
        758,3,168,84,0,757,759,3,120,60,0,758,757,1,0,0,0,758,759,1,0,0,
        0,759,761,1,0,0,0,760,747,1,0,0,0,760,752,1,0,0,0,761,762,1,0,0,
        0,762,763,5,71,0,0,763,764,3,80,40,0,764,117,1,0,0,0,765,766,5,23,
        0,0,766,767,3,78,39,0,767,119,1,0,0,0,768,769,3,122,61,0,769,770,
        3,124,62,0,770,777,1,0,0,0,771,772,3,124,62,0,772,773,3,122,61,0,
        773,777,1,0,0,0,774,777,3,122,61,0,775,777,3,124,62,0,776,768,1,
        0,0,0,776,771,1,0,0,0,776,774,1,0,0,0,776,775,1,0,0,0,777,121,1,
        0,0,0,778,779,5,31,0,0,779,780,3,194,97,0,780,123,1,0,0,0,781,782,
        5,34,0,0,782,783,3,194,97,0,783,125,1,0,0,0,784,786,3,134,67,0,785,
        784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,788,5,41,0,0,788,
        789,7,2,0,0,789,790,3,194,97,0,790,792,5,70,0,0,791,793,3,138,69,
        0,792,791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,797,5,71,0,
        0,795,796,5,86,0,0,796,798,3,154,77,0,797,795,1,0,0,0,797,798,1,
        0,0,0,798,127,1,0,0,0,799,801,3,134,67,0,800,799,1,0,0,0,800,801,
        1,0,0,0,801,802,1,0,0,0,802,803,5,64,0,0,803,805,3,194,97,0,804,
        806,3,152,76,0,805,804,1,0,0,0,805,806,1,0,0,0,806,812,1,0,0,0,807,
        809,5,4,0,0,808,810,5,44,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,
        811,1,0,0,0,811,813,3,194,97,0,812,807,1,0,0,0,812,813,1,0,0,0,813,
        816,1,0,0,0,814,815,5,79,0,0,815,817,3,168,84,0,816,814,1,0,0,0,
        816,817,1,0,0,0,817,129,1,0,0,0,818,820,3,134,67,0,819,818,1,0,0,
        0,819,820,1,0,0,0,820,821,1,0,0,0,821,822,5,14,0,0,822,823,3,194,
        97,0,823,824,3,132,66,0,824,131,1,0,0,0,825,826,5,86,0,0,826,828,
        3,154,77,0,827,825,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,
        5,46,0,0,830,835,3,154,77,0,831,832,5,77,0,0,832,834,3,154,77,0,
        833,831,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,
        836,840,1,0,0,0,837,835,1,0,0,0,838,839,5,79,0,0,839,841,3,168,84,
        0,840,838,1,0,0,0,840,841,1,0,0,0,841,133,1,0,0,0,842,855,3,12,6,
        0,843,855,5,3,0,0,844,855,5,40,0,0,845,855,5,33,0,0,846,855,5,42,
        0,0,847,855,5,43,0,0,848,855,5,49,0,0,849,855,5,1,0,0,850,855,5,
        38,0,0,851,855,5,22,0,0,852,855,5,56,0,0,853,855,5,45,0,0,854,842,
        1,0,0,0,854,843,1,0,0,0,854,844,1,0,0,0,854,845,1,0,0,0,854,846,
        1,0,0,0,854,847,1,0,0,0,854,848,1,0,0,0,854,849,1,0,0,0,854,850,
        1,0,0,0,854,851,1,0,0,0,854,852,1,0,0,0,854,853,1,0,0,0,855,856,
        1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,135,1,0,0,0,858,860,
        3,192,96,0,859,861,3,148,74,0,860,859,1,0,0,0,860,861,1,0,0,0,861,
        868,1,0,0,0,862,863,5,78,0,0,863,864,3,194,97,0,864,865,3,148,74,
        0,865,867,1,0,0,0,866,862,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,
        0,868,869,1,0,0,0,869,137,1,0,0,0,870,868,1,0,0,0,871,876,3,140,
        70,0,872,873,5,77,0,0,873,875,3,140,70,0,874,872,1,0,0,0,875,878,
        1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,139,1,0,0,0,878,876,
        1,0,0,0,879,881,3,12,6,0,880,879,1,0,0,0,881,884,1,0,0,0,882,880,
        1,0,0,0,882,883,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,885,887,
        5,22,0,0,886,885,1,0,0,0,886,887,1,0,0,0,887,890,1,0,0,0,888,891,
        3,194,97,0,889,891,3,142,71,0,890,888,1,0,0,0,890,889,1,0,0,0,891,
        897,1,0,0,0,892,895,5,86,0,0,893,896,3,154,77,0,894,896,3,158,79,
        0,895,893,1,0,0,0,895,894,1,0,0,0,896,898,1,0,0,0,897,892,1,0,0,
        0,897,898,1,0,0,0,898,901,1,0,0,0,899,900,5,79,0,0,900,902,3,168,
        84,0,901,899,1,0,0,0,901,902,1,0,0,0,902,141,1,0,0,0,903,906,5,6,
        0,0,904,906,3,194,97,0,905,903,1,0,0,0,905,904,1,0,0,0,906,907,1,
        0,0,0,907,908,3,158,79,0,908,143,1,0,0,0,909,910,5,81,0,0,910,915,
        3,146,73,0,911,912,5,77,0,0,912,914,3,146,73,0,913,911,1,0,0,0,914,
        917,1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,
        915,1,0,0,0,918,919,5,80,0,0,919,145,1,0,0,0,920,923,3,194,97,0,
        921,922,5,20,0,0,922,924,3,154,77,0,923,921,1,0,0,0,923,924,1,0,
        0,0,924,147,1,0,0,0,925,926,5,81,0,0,926,931,3,150,75,0,927,928,
        5,77,0,0,928,930,3,150,75,0,929,927,1,0,0,0,930,933,1,0,0,0,931,
        929,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,931,1,0,0,0,934,
        935,5,80,0,0,935,149,1,0,0,0,936,943,3,154,77,0,937,940,5,84,0,0,
        938,939,7,3,0,0,939,941,3,154,77,0,940,938,1,0,0,0,940,941,1,0,0,
        0,941,943,1,0,0,0,942,936,1,0,0,0,942,937,1,0,0,0,943,151,1,0,0,
        0,944,945,5,86,0,0,945,948,3,154,77,0,946,948,3,158,79,0,947,944,
        1,0,0,0,947,946,1,0,0,0,948,153,1,0,0,0,949,954,3,156,78,0,950,951,
        5,98,0,0,951,953,3,156,78,0,952,950,1,0,0,0,953,956,1,0,0,0,954,
        952,1,0,0,0,954,955,1,0,0,0,955,155,1,0,0,0,956,954,1,0,0,0,957,
        962,3,136,68,0,958,959,5,74,0,0,959,961,5,75,0,0,960,958,1,0,0,0,
        961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,969,1,0,0,0,
        964,962,1,0,0,0,965,966,5,6,0,0,966,969,3,158,79,0,967,969,5,65,
        0,0,968,957,1,0,0,0,968,965,1,0,0,0,968,967,1,0,0,0,969,157,1,0,
        0,0,970,979,5,70,0,0,971,976,3,160,80,0,972,973,5,77,0,0,973,975,
        3,160,80,0,974,972,1,0,0,0,975,978,1,0,0,0,976,974,1,0,0,0,976,977,
        1,0,0,0,977,980,1,0,0,0,978,976,1,0,0,0,979,971,1,0,0,0,979,980,
        1,0,0,0,980,981,1,0,0,0,981,984,5,71,0,0,982,983,5,86,0,0,983,985,
        3,154,77,0,984,982,1,0,0,0,984,985,1,0,0,0,985,159,1,0,0,0,986,990,
        3,194,97,0,987,988,5,79,0,0,988,991,3,168,84,0,989,991,3,158,79,
        0,990,987,1,0,0,0,990,989,1,0,0,0,991,1003,1,0,0,0,992,993,3,194,
        97,0,993,994,5,86,0,0,994,996,1,0,0,0,995,992,1,0,0,0,995,996,1,
        0,0,0,996,997,1,0,0,0,997,1000,3,154,77,0,998,999,5,79,0,0,999,1001,
        3,168,84,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1003,1,0,0,0,
        1002,986,1,0,0,0,1002,995,1,0,0,0,1003,161,1,0,0,0,1004,1013,5,70,
        0,0,1005,1010,3,164,82,0,1006,1007,5,77,0,0,1007,1009,3,164,82,0,
        1008,1006,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,0,0,0,1010,1011,
        1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1013,1005,1,0,0,0,1013,
        1014,1,0,0,0,1014,1015,1,0,0,0,1015,1016,5,71,0,0,1016,163,1,0,0,
        0,1017,1021,3,166,83,0,1018,1021,3,168,84,0,1019,1021,3,114,57,0,
        1020,1017,1,0,0,0,1020,1018,1,0,0,0,1020,1019,1,0,0,0,1021,165,1,
        0,0,0,1022,1023,5,86,0,0,1023,1024,3,194,97,0,1024,1025,5,79,0,0,
        1025,1026,3,168,84,0,1026,167,1,0,0,0,1027,1028,6,84,-1,0,1028,1029,
        3,172,86,0,1029,1030,3,174,87,0,1030,1065,1,0,0,0,1031,1032,7,4,
        0,0,1032,1065,3,168,84,14,1033,1065,3,190,95,0,1034,1035,7,5,0,0,
        1035,1065,3,168,84,11,1036,1038,5,35,0,0,1037,1039,3,136,68,0,1038,
        1037,1,0,0,0,1038,1039,1,0,0,0,1039,1041,1,0,0,0,1040,1042,3,162,
        81,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1044,1,0,0,0,1043,
        1045,3,176,88,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,1053,1,
        0,0,0,1046,1049,5,72,0,0,1047,1050,3,178,89,0,1048,1050,3,170,85,
        0,1049,1047,1,0,0,0,1049,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1052,
        5,73,0,0,1052,1054,1,0,0,0,1053,1046,1,0,0,0,1053,1054,1,0,0,0,1054,
        1065,1,0,0,0,1055,1056,7,6,0,0,1056,1065,3,168,84,7,1057,1058,5,
        95,0,0,1058,1065,3,168,84,4,1059,1060,5,19,0,0,1060,1061,5,70,0,
        0,1061,1062,3,168,84,0,1062,1063,5,71,0,0,1063,1065,1,0,0,0,1064,
        1027,1,0,0,0,1064,1031,1,0,0,0,1064,1033,1,0,0,0,1064,1034,1,0,0,
        0,1064,1036,1,0,0,0,1064,1055,1,0,0,0,1064,1057,1,0,0,0,1064,1059,
        1,0,0,0,1065,1137,1,0,0,0,1066,1067,10,22,0,0,1067,1068,7,7,0,0,
        1068,1136,3,168,84,23,1069,1071,10,20,0,0,1070,1072,7,8,0,0,1071,
        1070,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1074,5,78,
        0,0,1074,1136,3,168,84,21,1075,1076,10,19,0,0,1076,1077,7,9,0,0,
        1077,1136,3,168,84,20,1078,1085,10,18,0,0,1079,1086,5,87,0,0,1080,
        1086,5,80,0,0,1081,1086,5,81,0,0,1082,1086,5,88,0,0,1083,1086,3,
        216,108,0,1084,1086,5,89,0,0,1085,1079,1,0,0,0,1085,1080,1,0,0,0,
        1085,1081,1,0,0,0,1085,1082,1,0,0,0,1085,1083,1,0,0,0,1085,1084,
        1,0,0,0,1086,1087,1,0,0,0,1087,1136,3,168,84,19,1088,1096,10,17,
        0,0,1089,1090,5,81,0,0,1090,1097,5,81,0,0,1091,1092,5,80,0,0,1092,
        1097,5,80,0,0,1093,1094,5,80,0,0,1094,1095,5,80,0,0,1095,1097,5,
        80,0,0,1096,1089,1,0,0,0,1096,1091,1,0,0,0,1096,1093,1,0,0,0,1097,
        1098,1,0,0,0,1098,1136,3,168,84,18,1099,1100,10,13,0,0,1100,1101,
        5,85,0,0,1101,1136,3,168,84,14,1102,1103,10,9,0,0,1103,1104,7,10,
        0,0,1104,1136,3,168,84,9,1105,1106,10,6,0,0,1106,1107,7,11,0,0,1107,
        1136,3,168,84,6,1108,1109,10,3,0,0,1109,1110,5,84,0,0,1110,1111,
        3,168,84,0,1111,1112,5,86,0,0,1112,1113,3,168,84,3,1113,1136,1,0,
        0,0,1114,1115,10,2,0,0,1115,1116,5,104,0,0,1116,1136,3,168,84,3,
        1117,1119,10,21,0,0,1118,1120,3,148,74,0,1119,1118,1,0,0,0,1119,
        1120,1,0,0,0,1120,1121,1,0,0,0,1121,1136,3,162,81,0,1122,1123,10,
        15,0,0,1123,1136,7,12,0,0,1124,1125,10,8,0,0,1125,1126,5,60,0,0,
        1126,1136,3,156,78,0,1127,1129,10,5,0,0,1128,1130,5,84,0,0,1129,
        1128,1,0,0,0,1129,1130,1,0,0,0,1130,1131,1,0,0,0,1131,1132,5,74,
        0,0,1132,1133,3,168,84,0,1133,1134,5,75,0,0,1134,1136,1,0,0,0,1135,
        1066,1,0,0,0,1135,1069,1,0,0,0,1135,1075,1,0,0,0,1135,1078,1,0,0,
        0,1135,1088,1,0,0,0,1135,1099,1,0,0,0,1135,1102,1,0,0,0,1135,1105,
        1,0,0,0,1135,1108,1,0,0,0,1135,1114,1,0,0,0,1135,1117,1,0,0,0,1135,
        1122,1,0,0,0,1135,1124,1,0,0,0,1135,1127,1,0,0,0,1136,1139,1,0,0,
        0,1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,169,1,0,0,0,1139,1137,
        1,0,0,0,1140,1141,3,54,27,0,1141,171,1,0,0,0,1142,1144,5,106,0,0,
        1143,1145,3,138,69,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1146,
        1,0,0,0,1146,1147,5,102,0,0,1147,173,1,0,0,0,1148,1151,3,168,84,
        0,1149,1151,3,78,39,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,175,
        1,0,0,0,1152,1154,5,74,0,0,1153,1155,3,168,84,0,1154,1153,1,0,0,
        0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1158,5,75,0,0,1157,1152,
        1,0,0,0,1158,1159,1,0,0,0,1159,1157,1,0,0,0,1159,1160,1,0,0,0,1160,
        177,1,0,0,0,1161,1164,3,180,90,0,1162,1164,3,186,93,0,1163,1161,
        1,0,0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,179,1,0,0,0,1165,
        1168,3,184,92,0,1166,1168,3,182,91,0,1167,1165,1,0,0,0,1167,1166,
        1,0,0,0,1168,181,1,0,0,0,1169,1174,3,168,84,0,1170,1171,5,77,0,0,
        1171,1173,3,168,84,0,1172,1170,1,0,0,0,1173,1176,1,0,0,0,1174,1172,
        1,0,0,0,1174,1175,1,0,0,0,1175,183,1,0,0,0,1176,1174,1,0,0,0,1177,
        1178,3,168,84,0,1178,1179,5,102,0,0,1179,1187,3,168,84,0,1180,1181,
        5,77,0,0,1181,1182,3,168,84,0,1182,1183,5,102,0,0,1183,1184,3,168,
        84,0,1184,1186,1,0,0,0,1185,1180,1,0,0,0,1186,1189,1,0,0,0,1187,
        1185,1,0,0,0,1187,1188,1,0,0,0,1188,185,1,0,0,0,1189,1187,1,0,0,
        0,1190,1195,3,188,94,0,1191,1192,5,77,0,0,1192,1194,3,188,94,0,1193,
        1191,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,1196,1,0,0,
        0,1196,187,1,0,0,0,1197,1195,1,0,0,0,1198,1199,5,86,0,0,1199,1200,
        3,194,97,0,1200,1201,5,79,0,0,1201,1202,3,168,84,0,1202,189,1,0,
        0,0,1203,1216,3,198,99,0,1204,1206,5,105,0,0,1205,1204,1,0,0,0,1205,
        1206,1,0,0,0,1206,1207,1,0,0,0,1207,1216,3,194,97,0,1208,1216,3,
        156,78,0,1209,1210,5,70,0,0,1210,1211,3,168,84,0,1211,1212,5,71,
        0,0,1212,1216,1,0,0,0,1213,1216,5,54,0,0,1214,1216,5,52,0,0,1215,
        1203,1,0,0,0,1215,1205,1,0,0,0,1215,1208,1,0,0,0,1215,1209,1,0,0,
        0,1215,1213,1,0,0,0,1215,1214,1,0,0,0,1216,191,1,0,0,0,1217,1222,
        3,194,97,0,1218,1219,5,78,0,0,1219,1221,3,194,97,0,1220,1218,1,0,
        0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,193,
        1,0,0,0,1224,1222,1,0,0,0,1225,1226,7,13,0,0,1226,195,1,0,0,0,1227,
        1229,5,76,0,0,1228,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1228,1,0,
        0,0,1230,1231,1,0,0,0,1231,197,1,0,0,0,1232,1239,3,206,103,0,1233,
        1239,3,200,100,0,1234,1239,3,208,104,0,1235,1239,3,210,105,0,1236,
        1239,3,212,106,0,1237,1239,3,214,107,0,1238,1232,1,0,0,0,1238,1233,
        1,0,0,0,1238,1234,1,0,0,0,1238,1235,1,0,0,0,1238,1236,1,0,0,0,1238,
        1237,1,0,0,0,1239,199,1,0,0,0,1240,1244,5,122,0,0,1241,1243,3,202,
        101,0,1242,1241,1,0,0,0,1243,1246,1,0,0,0,1244,1242,1,0,0,0,1244,
        1245,1,0,0,0,1245,1247,1,0,0,0,1246,1244,1,0,0,0,1247,1258,5,129,
        0,0,1248,1252,5,123,0,0,1249,1251,3,202,101,0,1250,1249,1,0,0,0,
        1251,1254,1,0,0,0,1252,1250,1,0,0,0,1252,1253,1,0,0,0,1253,1255,
        1,0,0,0,1254,1252,1,0,0,0,1255,1258,5,132,0,0,1256,1258,5,121,0,
        0,1257,1240,1,0,0,0,1257,1248,1,0,0,0,1257,1256,1,0,0,0,1258,201,
        1,0,0,0,1259,1263,3,204,102,0,1260,1263,5,131,0,0,1261,1263,5,128,
        0,0,1262,1259,1,0,0,0,1262,1260,1,0,0,0,1262,1261,1,0,0,0,1263,203,
        1,0,0,0,1264,1265,5,127,0,0,1265,1266,3,168,84,0,1266,1267,5,73,
        0,0,1267,1273,1,0,0,0,1268,1269,5,130,0,0,1269,1270,3,168,84,0,1270,
        1271,5,73,0,0,1271,1273,1,0,0,0,1272,1264,1,0,0,0,1272,1268,1,0,
        0,0,1273,205,1,0,0,0,1274,1275,5,120,0,0,1275,207,1,0,0,0,1276,1278,
        5,72,0,0,1277,1279,3,182,91,0,1278,1277,1,0,0,0,1278,1279,1,0,0,
        0,1279,1280,1,0,0,0,1280,1281,5,73,0,0,1281,209,1,0,0,0,1282,1283,
        3,194,97,0,1283,1286,5,105,0,0,1284,1287,3,194,97,0,1285,1287,5,
        11,0,0,1286,1284,1,0,0,0,1286,1285,1,0,0,0,1287,1289,1,0,0,0,1288,
        1290,3,148,74,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1292,1,
        0,0,0,1291,1293,3,162,81,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,
        211,1,0,0,0,1294,1295,7,14,0,0,1295,213,1,0,0,0,1296,1298,5,72,0,
        0,1297,1299,3,184,92,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,
        1300,1,0,0,0,1300,1301,5,73,0,0,1301,215,1,0,0,0,1302,1303,5,80,
        0,0,1303,1304,5,79,0,0,1304,217,1,0,0,0,172,219,222,226,231,233,
        239,244,247,251,253,259,262,270,278,282,285,291,296,300,308,311,
        317,322,330,337,342,350,353,359,364,372,375,381,391,394,400,423,
        437,441,444,448,459,462,466,471,474,478,488,491,495,505,508,512,
        525,528,532,537,544,551,556,560,565,568,573,578,586,607,610,613,
        621,624,634,637,640,645,650,660,683,693,699,708,712,717,723,726,
        731,735,749,752,758,760,776,785,792,797,800,805,809,812,816,819,
        827,835,840,854,856,860,868,876,882,886,890,895,897,901,905,915,
        923,931,940,942,947,954,962,968,976,979,984,990,995,1000,1002,1010,
        1013,1020,1038,1041,1044,1049,1053,1064,1071,1085,1096,1119,1129,
        1135,1137,1144,1150,1154,1159,1163,1167,1174,1187,1195,1205,1215,
        1222,1230,1238,1244,1252,1257,1262,1272,1278,1286,1289,1292,1298
    ]

class GosuParser ( Parser ):

    grammarFileName = "GosuParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "';'", "','", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'~'", "'?'", "'?:'", "':'", "<INVALID>", 
                     "'<='", "<INVALID>", "'&&'", "'||'", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'->'", "'@'", "<INVALID>", "'#'", "'\\'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'&&='", "<INVALID>", 
                     "'^='", "'%='", "'<<='", "'>>='", "'>>>='" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "AND", "ANNOTATION", "AS", 
                      "ASSERT", "BLOCK", "BREAK", "CASE", "CATCH", "CLASS", 
                      "CONSTRUCT", "CONTINUE", "DEFAULT", "DELEGATE", "DO", 
                      "ELSE", "ENHANCEMENT", "ENUM", "EVAL", "EXTENDS", 
                      "FALSE", "FINAL", "FINALLY", "FOR", "FOREACH", "FUNCTION", 
                      "GET", "IF", "IMPLEMENTS", "IN", "INDEX", "INTERFACE", 
                      "INTERNAL", "ITERATOR", "NEW", "NOT", "OR", "OVERRIDE", 
                      "PACKAGE", "PRIVATE", "PROPERTY", "PROTECTED", "PUBLIC", 
                      "READONLY", "REIFIED", "REPRESENTS", "RETURN", "SET", 
                      "STATIC", "STATICTYPEOF", "STRUCTURE", "SUPER", "SWITCH", 
                      "THIS", "THROW", "TRANSIENT", "TRUE", "TRY", "TYPEAS", 
                      "TYPEIS", "TYPEOF", "USES", "USING", "VAR", "VOID", 
                      "WHILE", "NULL", "NAN", "INFINITY", "LPAREN", "RPAREN", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMICOLON", 
                      "COMMA", "DOT", "EQUALS", "GT", "LT", "EXCLAMATION", 
                      "TILDE", "QUESTION", "QUESTION_COLON", "COLON", "EQUAL", 
                      "LE", "NOTEQUAL", "CONJ", "DISJ", "INC", "DEC", "PLUS", 
                      "MINUS", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ARROW", "AT", "INTERVALOP", "HASH", "BACKSLASH", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "LOGICAL_AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "IDENTIFIER", "NumberLiteral", "CHAR_LITERAL", "OPEN_STRING_DQ", 
                      "OPEN_STRING_SQ", "WS", "COMMENT", "LINE_COMMENT", 
                      "DQ_INTERP", "DQ_TEXT", "CLOSE_STRING_DQ", "SQ_INTERP", 
                      "SQ_TEXT", "CLOSE_STRING_SQ" ]

    RULE_start = 0
    RULE_packageDeclaration = 1
    RULE_usesStatementList = 2
    RULE_usesStatement = 3
    RULE_usesFeatureLiteral = 4
    RULE_typeDeclaration = 5
    RULE_annotation = 6
    RULE_classDeclaration = 7
    RULE_classSignature = 8
    RULE_enhancementDeclaration = 9
    RULE_enhancementSignature = 10
    RULE_interfaceDeclaration = 11
    RULE_interfaceSignature = 12
    RULE_structureDeclaration = 13
    RULE_structureSignature = 14
    RULE_enumDeclaration = 15
    RULE_enumSignature = 16
    RULE_annotationDeclaration = 17
    RULE_annotationSignature = 18
    RULE_classBody = 19
    RULE_enhancementBody = 20
    RULE_interfaceBody = 21
    RULE_structureBody = 22
    RULE_enumBody = 23
    RULE_annotationBody = 24
    RULE_enumConstants = 25
    RULE_enumConstant = 26
    RULE_classMembers = 27
    RULE_enhancementMembers = 28
    RULE_interfaceMembers = 29
    RULE_structureMembers = 30
    RULE_annotationMembers = 31
    RULE_function = 32
    RULE_constructor = 33
    RULE_property = 34
    RULE_defaultValueFunction = 35
    RULE_functionSignature = 36
    RULE_constructorSignature = 37
    RULE_functionBody = 38
    RULE_statementBlock = 39
    RULE_statement = 40
    RULE_ifStatement = 41
    RULE_elseStatement = 42
    RULE_tryCatchFinallyStatement = 43
    RULE_catchClause = 44
    RULE_throwStatement = 45
    RULE_returnStatement = 46
    RULE_whileStatement = 47
    RULE_doWhileStatement = 48
    RULE_switchStatement = 49
    RULE_switchBlockStatement = 50
    RULE_caseOrDefaultStatement = 51
    RULE_usingStatement = 52
    RULE_assertStatement = 53
    RULE_localVarStatement = 54
    RULE_breakStatement = 55
    RULE_continueStatement = 56
    RULE_assignStatement = 57
    RULE_forEachStatement = 58
    RULE_finallyStatement = 59
    RULE_indexRest = 60
    RULE_indexVar = 61
    RULE_iteratorVar = 62
    RULE_propertySignature = 63
    RULE_field = 64
    RULE_delegate = 65
    RULE_delegateStatement = 66
    RULE_modifiers = 67
    RULE_classOrInterfaceType = 68
    RULE_parameterDeclarationList = 69
    RULE_parameterDeclaration = 70
    RULE_blockType = 71
    RULE_typeParameters = 72
    RULE_typeParameter = 73
    RULE_typeArguments = 74
    RULE_typeArgument = 75
    RULE_optionalType = 76
    RULE_typeLiteral = 77
    RULE_type = 78
    RULE_blockLiteral = 79
    RULE_blockLiteralArg = 80
    RULE_arguments = 81
    RULE_argExpression = 82
    RULE_namedArgumentExpression = 83
    RULE_expression = 84
    RULE_anonymousInnerClass = 85
    RULE_lambdaSignature = 86
    RULE_lambdaBody = 87
    RULE_arrayCreator = 88
    RULE_initializer = 89
    RULE_initializerExpression = 90
    RULE_arrayValueList = 91
    RULE_mapInitializerList = 92
    RULE_objectInitializer = 93
    RULE_initializerAssignment = 94
    RULE_primary = 95
    RULE_namespace = 96
    RULE_identifier = 97
    RULE_semicolon = 98
    RULE_literal = 99
    RULE_stringLiteral = 100
    RULE_stringPart = 101
    RULE_interpolation = 102
    RULE_numberLiteral = 103
    RULE_arrayLiteral = 104
    RULE_featureLiteral = 105
    RULE_booleanLiteral = 106
    RULE_mapLiteral = 107
    RULE_greaterEqual = 108

    ruleNames =  [ "start", "packageDeclaration", "usesStatementList", "usesStatement", 
                   "usesFeatureLiteral", "typeDeclaration", "annotation", 
                   "classDeclaration", "classSignature", "enhancementDeclaration", 
                   "enhancementSignature", "interfaceDeclaration", "interfaceSignature", 
                   "structureDeclaration", "structureSignature", "enumDeclaration", 
                   "enumSignature", "annotationDeclaration", "annotationSignature", 
                   "classBody", "enhancementBody", "interfaceBody", "structureBody", 
                   "enumBody", "annotationBody", "enumConstants", "enumConstant", 
                   "classMembers", "enhancementMembers", "interfaceMembers", 
                   "structureMembers", "annotationMembers", "function", 
                   "constructor", "property", "defaultValueFunction", "functionSignature", 
                   "constructorSignature", "functionBody", "statementBlock", 
                   "statement", "ifStatement", "elseStatement", "tryCatchFinallyStatement", 
                   "catchClause", "throwStatement", "returnStatement", "whileStatement", 
                   "doWhileStatement", "switchStatement", "switchBlockStatement", 
                   "caseOrDefaultStatement", "usingStatement", "assertStatement", 
                   "localVarStatement", "breakStatement", "continueStatement", 
                   "assignStatement", "forEachStatement", "finallyStatement", 
                   "indexRest", "indexVar", "iteratorVar", "propertySignature", 
                   "field", "delegate", "delegateStatement", "modifiers", 
                   "classOrInterfaceType", "parameterDeclarationList", "parameterDeclaration", 
                   "blockType", "typeParameters", "typeParameter", "typeArguments", 
                   "typeArgument", "optionalType", "typeLiteral", "type", 
                   "blockLiteral", "blockLiteralArg", "arguments", "argExpression", 
                   "namedArgumentExpression", "expression", "anonymousInnerClass", 
                   "lambdaSignature", "lambdaBody", "arrayCreator", "initializer", 
                   "initializerExpression", "arrayValueList", "mapInitializerList", 
                   "objectInitializer", "initializerAssignment", "primary", 
                   "namespace", "identifier", "semicolon", "literal", "stringLiteral", 
                   "stringPart", "interpolation", "numberLiteral", "arrayLiteral", 
                   "featureLiteral", "booleanLiteral", "mapLiteral", "greaterEqual" ]

    EOF = Token.EOF
    ABSTRACT=1
    AND=2
    ANNOTATION=3
    AS=4
    ASSERT=5
    BLOCK=6
    BREAK=7
    CASE=8
    CATCH=9
    CLASS=10
    CONSTRUCT=11
    CONTINUE=12
    DEFAULT=13
    DELEGATE=14
    DO=15
    ELSE=16
    ENHANCEMENT=17
    ENUM=18
    EVAL=19
    EXTENDS=20
    FALSE=21
    FINAL=22
    FINALLY=23
    FOR=24
    FOREACH=25
    FUNCTION=26
    GET=27
    IF=28
    IMPLEMENTS=29
    IN=30
    INDEX=31
    INTERFACE=32
    INTERNAL=33
    ITERATOR=34
    NEW=35
    NOT=36
    OR=37
    OVERRIDE=38
    PACKAGE=39
    PRIVATE=40
    PROPERTY=41
    PROTECTED=42
    PUBLIC=43
    READONLY=44
    REIFIED=45
    REPRESENTS=46
    RETURN=47
    SET=48
    STATIC=49
    STATICTYPEOF=50
    STRUCTURE=51
    SUPER=52
    SWITCH=53
    THIS=54
    THROW=55
    TRANSIENT=56
    TRUE=57
    TRY=58
    TYPEAS=59
    TYPEIS=60
    TYPEOF=61
    USES=62
    USING=63
    VAR=64
    VOID=65
    WHILE=66
    NULL=67
    NAN=68
    INFINITY=69
    LPAREN=70
    RPAREN=71
    LBRACE=72
    RBRACE=73
    LBRACK=74
    RBRACK=75
    SEMICOLON=76
    COMMA=77
    DOT=78
    EQUALS=79
    GT=80
    LT=81
    EXCLAMATION=82
    TILDE=83
    QUESTION=84
    QUESTION_COLON=85
    COLON=86
    EQUAL=87
    LE=88
    NOTEQUAL=89
    CONJ=90
    DISJ=91
    INC=92
    DEC=93
    PLUS=94
    MINUS=95
    MUL=96
    DIV=97
    BITAND=98
    BITOR=99
    CARET=100
    MOD=101
    ARROW=102
    AT=103
    INTERVALOP=104
    HASH=105
    BACKSLASH=106
    ADD_ASSIGN=107
    SUB_ASSIGN=108
    MUL_ASSIGN=109
    DIV_ASSIGN=110
    AND_ASSIGN=111
    LOGICAL_AND_ASSIGN=112
    OR_ASSIGN=113
    XOR_ASSIGN=114
    MOD_ASSIGN=115
    LSHIFT_ASSIGN=116
    RSHIFT_ASSIGN=117
    URSHIFT_ASSIGN=118
    IDENTIFIER=119
    NumberLiteral=120
    CHAR_LITERAL=121
    OPEN_STRING_DQ=122
    OPEN_STRING_SQ=123
    WS=124
    COMMENT=125
    LINE_COMMENT=126
    DQ_INTERP=127
    DQ_TEXT=128
    CLOSE_STRING_DQ=129
    SQ_INTERP=130
    SQ_TEXT=131
    CLOSE_STRING_SQ=132

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclaration(self):
            return self.getTypedRuleContext(GosuParser.TypeDeclarationContext,0)


        def packageDeclaration(self):
            return self.getTypedRuleContext(GosuParser.PackageDeclarationContext,0)


        def usesStatementList(self):
            return self.getTypedRuleContext(GosuParser.UsesStatementListContext,0)


        def EOF(self):
            return self.getToken(GosuParser.EOF, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = GosuParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 218
                self.packageDeclaration()


            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 221
                self.usesStatementList()


            self.state = 224
            self.typeDeclaration()
            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 225
                self.match(GosuParser.EOF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(GosuParser.PACKAGE, 0)

        def namespace(self):
            return self.getTypedRuleContext(GosuParser.NamespaceContext,0)


        def semicolon(self):
            return self.getTypedRuleContext(GosuParser.SemicolonContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = GosuParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(GosuParser.PACKAGE)
            self.state = 233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 229
                self.namespace()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 230
                    self.semicolon()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsesStatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USES(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.USES)
            else:
                return self.getToken(GosuParser.USES, i)

        def usesStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.UsesStatementContext)
            else:
                return self.getTypedRuleContext(GosuParser.UsesStatementContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_usesStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsesStatementList" ):
                listener.enterUsesStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsesStatementList" ):
                listener.exitUsesStatementList(self)




    def usesStatementList(self):

        localctx = GosuParser.UsesStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_usesStatementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 235
                self.match(GosuParser.USES)
                self.state = 236
                self.usesStatement()
                self.state = 239 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==62):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace(self):
            return self.getTypedRuleContext(GosuParser.NamespaceContext,0)


        def DOT(self):
            return self.getToken(GosuParser.DOT, 0)

        def MUL(self):
            return self.getToken(GosuParser.MUL, 0)

        def semicolon(self):
            return self.getTypedRuleContext(GosuParser.SemicolonContext,0)


        def usesFeatureLiteral(self):
            return self.getTypedRuleContext(GosuParser.UsesFeatureLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_usesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsesStatement" ):
                listener.enterUsesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsesStatement" ):
                listener.exitUsesStatement(self)




    def usesStatement(self):

        localctx = GosuParser.UsesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_usesStatement)
        self._la = 0 # Token type
        try:
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 241
                self.namespace()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 242
                    self.match(GosuParser.DOT)
                    self.state = 243
                    self.match(GosuParser.MUL)


                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 246
                    self.semicolon()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.usesFeatureLiteral()
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 250
                    self.semicolon()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsesFeatureLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace(self):
            return self.getTypedRuleContext(GosuParser.NamespaceContext,0)


        def HASH(self):
            return self.getToken(GosuParser.HASH, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def MUL(self):
            return self.getToken(GosuParser.MUL, 0)

        def arguments(self):
            return self.getTypedRuleContext(GosuParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_usesFeatureLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsesFeatureLiteral" ):
                listener.enterUsesFeatureLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsesFeatureLiteral" ):
                listener.exitUsesFeatureLiteral(self)




    def usesFeatureLiteral(self):

        localctx = GosuParser.UsesFeatureLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_usesFeatureLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.namespace()
            self.state = 256
            self.match(GosuParser.HASH)
            self.state = 262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 4, 5, 11, 17, 21, 22, 27, 31, 33, 34, 40, 42, 43, 44, 48, 49, 52, 54, 57, 65, 119]:
                self.state = 257
                self.identifier()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 258
                    self.arguments()


                pass
            elif token in [96]:
                self.state = 261
                self.match(GosuParser.MUL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(GosuParser.ClassDeclarationContext,0)


        def enhancementDeclaration(self):
            return self.getTypedRuleContext(GosuParser.EnhancementDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(GosuParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(GosuParser.InterfaceDeclarationContext,0)


        def structureDeclaration(self):
            return self.getTypedRuleContext(GosuParser.StructureDeclarationContext,0)


        def annotationDeclaration(self):
            return self.getTypedRuleContext(GosuParser.AnnotationDeclarationContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = GosuParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typeDeclaration)
        try:
            self.state = 270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.enhancementDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 266
                self.enumDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 267
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 268
                self.structureDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 269
                self.annotationDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(GosuParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(GosuParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.DOT)
            else:
                return self.getToken(GosuParser.DOT, i)

        def typeParameters(self):
            return self.getTypedRuleContext(GosuParser.TypeParametersContext,0)


        def arguments(self):
            return self.getTypedRuleContext(GosuParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = GosuParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(GosuParser.AT)
            self.state = 273
            self.identifier()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 274
                self.match(GosuParser.DOT)
                self.state = 275
                self.identifier()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 281
                self.typeParameters()


            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 284
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classSignature(self):
            return self.getTypedRuleContext(GosuParser.ClassSignatureContext,0)


        def classBody(self):
            return self.getTypedRuleContext(GosuParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = GosuParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.classSignature()
            self.state = 288
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(GosuParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GosuParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(GosuParser.EXTENDS, 0)

        def classOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassOrInterfaceTypeContext,i)


        def IMPLEMENTS(self):
            return self.getToken(GosuParser.IMPLEMENTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_classSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassSignature" ):
                listener.enterClassSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassSignature" ):
                listener.exitClassSignature(self)




    def classSignature(self):

        localctx = GosuParser.ClassSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 290
                self.modifiers()


            self.state = 293
            self.match(GosuParser.CLASS)
            self.state = 294
            self.identifier()
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 295
                self.typeParameters()


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 298
                self.match(GosuParser.EXTENDS)
                self.state = 299
                self.classOrInterfaceType()


            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 302
                self.match(GosuParser.IMPLEMENTS)
                self.state = 303
                self.classOrInterfaceType()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 304
                    self.match(GosuParser.COMMA)
                    self.state = 305
                    self.classOrInterfaceType()
                    self.state = 310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enhancementSignature(self):
            return self.getTypedRuleContext(GosuParser.EnhancementSignatureContext,0)


        def enhancementBody(self):
            return self.getTypedRuleContext(GosuParser.EnhancementBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_enhancementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancementDeclaration" ):
                listener.enterEnhancementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancementDeclaration" ):
                listener.exitEnhancementDeclaration(self)




    def enhancementDeclaration(self):

        localctx = GosuParser.EnhancementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enhancementDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.enhancementSignature()
            self.state = 314
            self.enhancementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancementSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENHANCEMENT(self):
            return self.getToken(GosuParser.ENHANCEMENT, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(GosuParser.ClassOrInterfaceTypeContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GosuParser.TypeParametersContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.LBRACK)
            else:
                return self.getToken(GosuParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.RBRACK)
            else:
                return self.getToken(GosuParser.RBRACK, i)

        def getRuleIndex(self):
            return GosuParser.RULE_enhancementSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancementSignature" ):
                listener.enterEnhancementSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancementSignature" ):
                listener.exitEnhancementSignature(self)




    def enhancementSignature(self):

        localctx = GosuParser.EnhancementSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_enhancementSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 316
                self.modifiers()


            self.state = 319
            self.match(GosuParser.ENHANCEMENT)
            self.state = 320
            self.identifier()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 321
                self.typeParameters()


            self.state = 324
            self.match(GosuParser.COLON)
            self.state = 325
            self.classOrInterfaceType()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 326
                self.match(GosuParser.LBRACK)
                self.state = 327
                self.match(GosuParser.RBRACK)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceSignature(self):
            return self.getTypedRuleContext(GosuParser.InterfaceSignatureContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(GosuParser.InterfaceBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = GosuParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interfaceDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.interfaceSignature()
            self.state = 334
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(GosuParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GosuParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(GosuParser.EXTENDS, 0)

        def classOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassOrInterfaceTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_interfaceSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceSignature" ):
                listener.enterInterfaceSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceSignature" ):
                listener.exitInterfaceSignature(self)




    def interfaceSignature(self):

        localctx = GosuParser.InterfaceSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interfaceSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 336
                self.modifiers()


            self.state = 339
            self.match(GosuParser.INTERFACE)
            self.state = 340
            self.identifier()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 341
                self.typeParameters()


            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 344
                self.match(GosuParser.EXTENDS)
                self.state = 345
                self.classOrInterfaceType()
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 346
                    self.match(GosuParser.COMMA)
                    self.state = 347
                    self.classOrInterfaceType()
                    self.state = 352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structureSignature(self):
            return self.getTypedRuleContext(GosuParser.StructureSignatureContext,0)


        def structureBody(self):
            return self.getTypedRuleContext(GosuParser.StructureBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_structureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureDeclaration" ):
                listener.enterStructureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureDeclaration" ):
                listener.exitStructureDeclaration(self)




    def structureDeclaration(self):

        localctx = GosuParser.StructureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_structureDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.structureSignature()
            self.state = 356
            self.structureBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCTURE(self):
            return self.getToken(GosuParser.STRUCTURE, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GosuParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(GosuParser.EXTENDS, 0)

        def classOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassOrInterfaceTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_structureSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureSignature" ):
                listener.enterStructureSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureSignature" ):
                listener.exitStructureSignature(self)




    def structureSignature(self):

        localctx = GosuParser.StructureSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structureSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 358
                self.modifiers()


            self.state = 361
            self.match(GosuParser.STRUCTURE)
            self.state = 362
            self.identifier()
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 363
                self.typeParameters()


            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 366
                self.match(GosuParser.EXTENDS)
                self.state = 367
                self.classOrInterfaceType()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 368
                    self.match(GosuParser.COMMA)
                    self.state = 369
                    self.classOrInterfaceType()
                    self.state = 374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumSignature(self):
            return self.getTypedRuleContext(GosuParser.EnumSignatureContext,0)


        def enumBody(self):
            return self.getTypedRuleContext(GosuParser.EnumBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = GosuParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_enumDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.enumSignature()
            self.state = 378
            self.enumBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(GosuParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(GosuParser.IMPLEMENTS, 0)

        def classOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassOrInterfaceTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_enumSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSignature" ):
                listener.enterEnumSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSignature" ):
                listener.exitEnumSignature(self)




    def enumSignature(self):

        localctx = GosuParser.EnumSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_enumSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 380
                self.modifiers()


            self.state = 383
            self.match(GosuParser.ENUM)
            self.state = 384
            self.identifier()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 385
                self.match(GosuParser.IMPLEMENTS)
                self.state = 386
                self.classOrInterfaceType()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 387
                    self.match(GosuParser.COMMA)
                    self.state = 388
                    self.classOrInterfaceType()
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationSignature(self):
            return self.getTypedRuleContext(GosuParser.AnnotationSignatureContext,0)


        def annotationBody(self):
            return self.getTypedRuleContext(GosuParser.AnnotationBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_annotationDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationDeclaration" ):
                listener.enterAnnotationDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationDeclaration" ):
                listener.exitAnnotationDeclaration(self)




    def annotationDeclaration(self):

        localctx = GosuParser.AnnotationDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_annotationDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.annotationSignature()
            self.state = 397
            self.annotationBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION(self):
            return self.getToken(GosuParser.ANNOTATION, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_annotationSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationSignature" ):
                listener.enterAnnotationSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationSignature" ):
                listener.exitAnnotationSignature(self)




    def annotationSignature(self):

        localctx = GosuParser.AnnotationSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_annotationSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 399
                self.modifiers()


            self.state = 402
            self.match(GosuParser.ANNOTATION)
            self.state = 403
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def classMembers(self):
            return self.getTypedRuleContext(GosuParser.ClassMembersContext,0)


        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = GosuParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(GosuParser.LBRACE)
            self.state = 406
            self.classMembers()
            self.state = 407
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def enhancementMembers(self):
            return self.getTypedRuleContext(GosuParser.EnhancementMembersContext,0)


        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_enhancementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancementBody" ):
                listener.enterEnhancementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancementBody" ):
                listener.exitEnhancementBody(self)




    def enhancementBody(self):

        localctx = GosuParser.EnhancementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_enhancementBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(GosuParser.LBRACE)
            self.state = 410
            self.enhancementMembers()
            self.state = 411
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def interfaceMembers(self):
            return self.getTypedRuleContext(GosuParser.InterfaceMembersContext,0)


        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = GosuParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_interfaceBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(GosuParser.LBRACE)
            self.state = 414
            self.interfaceMembers()
            self.state = 415
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def structureMembers(self):
            return self.getTypedRuleContext(GosuParser.StructureMembersContext,0)


        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_structureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureBody" ):
                listener.enterStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureBody" ):
                listener.exitStructureBody(self)




    def structureBody(self):

        localctx = GosuParser.StructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structureBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(GosuParser.LBRACE)
            self.state = 418
            self.structureMembers()
            self.state = 419
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def classMembers(self):
            return self.getTypedRuleContext(GosuParser.ClassMembersContext,0)


        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def enumConstants(self):
            return self.getTypedRuleContext(GosuParser.EnumConstantsContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_enumBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBody" ):
                listener.enterEnumBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBody" ):
                listener.exitEnumBody(self)




    def enumBody(self):

        localctx = GosuParser.EnumBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(GosuParser.LBRACE)
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 422
                self.enumConstants()


            self.state = 425
            self.classMembers()
            self.state = 426
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def annotationMembers(self):
            return self.getTypedRuleContext(GosuParser.AnnotationMembersContext,0)


        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_annotationBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationBody" ):
                listener.enterAnnotationBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationBody" ):
                listener.exitAnnotationBody(self)




    def annotationBody(self):

        localctx = GosuParser.AnnotationBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_annotationBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(GosuParser.LBRACE)
            self.state = 429
            self.annotationMembers()
            self.state = 430
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(GosuParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def semicolon(self):
            return self.getTypedRuleContext(GosuParser.SemicolonContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = GosuParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumConstants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.enumConstant()
            self.state = 437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 433
                    self.match(GosuParser.COMMA)
                    self.state = 434
                    self.enumConstant() 
                self.state = 439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 440
                self.match(GosuParser.COMMA)


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 443
                self.semicolon()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(GosuParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = GosuParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.identifier()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 447
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FunctionContext)
            else:
                return self.getTypedRuleContext(GosuParser.FunctionContext,i)


        def constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ConstructorContext)
            else:
                return self.getTypedRuleContext(GosuParser.ConstructorContext,i)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.PropertyContext)
            else:
                return self.getTypedRuleContext(GosuParser.PropertyContext,i)


        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FieldContext)
            else:
                return self.getTypedRuleContext(GosuParser.FieldContext,i)


        def delegate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.DelegateContext)
            else:
                return self.getTypedRuleContext(GosuParser.DelegateContext,i)


        def classDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassDeclarationContext,i)


        def interfaceDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.InterfaceDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.InterfaceDeclarationContext,i)


        def structureDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.StructureDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.StructureDeclarationContext,i)


        def enumDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.EnumDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.EnumDeclarationContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.SemicolonContext)
            else:
                return self.getTypedRuleContext(GosuParser.SemicolonContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_classMembers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMembers" ):
                listener.enterClassMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMembers" ):
                listener.exitClassMembers(self)




    def classMembers(self):

        localctx = GosuParser.ClassMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_classMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 74924308685933578) != 0) or _la==64 or _la==103:
                self.state = 459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 450
                    self.function()
                    pass

                elif la_ == 2:
                    self.state = 451
                    self.constructor()
                    pass

                elif la_ == 3:
                    self.state = 452
                    self.property_()
                    pass

                elif la_ == 4:
                    self.state = 453
                    self.field()
                    pass

                elif la_ == 5:
                    self.state = 454
                    self.delegate()
                    pass

                elif la_ == 6:
                    self.state = 455
                    self.classDeclaration()
                    pass

                elif la_ == 7:
                    self.state = 456
                    self.interfaceDeclaration()
                    pass

                elif la_ == 8:
                    self.state = 457
                    self.structureDeclaration()
                    pass

                elif la_ == 9:
                    self.state = 458
                    self.enumDeclaration()
                    pass


                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 461
                    self.semicolon()


                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancementMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FunctionContext)
            else:
                return self.getTypedRuleContext(GosuParser.FunctionContext,i)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.PropertyContext)
            else:
                return self.getTypedRuleContext(GosuParser.PropertyContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.SemicolonContext)
            else:
                return self.getTypedRuleContext(GosuParser.SemicolonContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_enhancementMembers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancementMembers" ):
                listener.enterEnhancementMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancementMembers" ):
                listener.exitEnhancementMembers(self)




    def enhancementMembers(self):

        localctx = GosuParser.EnhancementMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_enhancementMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 72672504576999434) != 0) or _la==103:
                self.state = 471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 469
                    self.function()
                    pass

                elif la_ == 2:
                    self.state = 470
                    self.property_()
                    pass


                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 473
                    self.semicolon()


                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FunctionContext)
            else:
                return self.getTypedRuleContext(GosuParser.FunctionContext,i)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.PropertyContext)
            else:
                return self.getTypedRuleContext(GosuParser.PropertyContext,i)


        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FieldContext)
            else:
                return self.getTypedRuleContext(GosuParser.FieldContext,i)


        def classDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassDeclarationContext,i)


        def interfaceDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.InterfaceDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.InterfaceDeclarationContext,i)


        def structureDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.StructureDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.StructureDeclarationContext,i)


        def enumDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.EnumDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.EnumDeclarationContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.SemicolonContext)
            else:
                return self.getTypedRuleContext(GosuParser.SemicolonContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_interfaceMembers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMembers" ):
                listener.enterInterfaceMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMembers" ):
                listener.exitInterfaceMembers(self)




    def interfaceMembers(self):

        localctx = GosuParser.InterfaceMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 74924308685915146) != 0) or _la==64 or _la==103:
                self.state = 488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 481
                    self.function()
                    pass

                elif la_ == 2:
                    self.state = 482
                    self.property_()
                    pass

                elif la_ == 3:
                    self.state = 483
                    self.field()
                    pass

                elif la_ == 4:
                    self.state = 484
                    self.classDeclaration()
                    pass

                elif la_ == 5:
                    self.state = 485
                    self.interfaceDeclaration()
                    pass

                elif la_ == 6:
                    self.state = 486
                    self.structureDeclaration()
                    pass

                elif la_ == 7:
                    self.state = 487
                    self.enumDeclaration()
                    pass


                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 490
                    self.semicolon()


                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FunctionContext)
            else:
                return self.getTypedRuleContext(GosuParser.FunctionContext,i)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.PropertyContext)
            else:
                return self.getTypedRuleContext(GosuParser.PropertyContext,i)


        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FieldContext)
            else:
                return self.getTypedRuleContext(GosuParser.FieldContext,i)


        def classDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassDeclarationContext,i)


        def interfaceDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.InterfaceDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.InterfaceDeclarationContext,i)


        def structureDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.StructureDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.StructureDeclarationContext,i)


        def enumDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.EnumDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.EnumDeclarationContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.SemicolonContext)
            else:
                return self.getTypedRuleContext(GosuParser.SemicolonContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_structureMembers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureMembers" ):
                listener.enterStructureMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureMembers" ):
                listener.exitStructureMembers(self)




    def structureMembers(self):

        localctx = GosuParser.StructureMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_structureMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 74924308685915146) != 0) or _la==64 or _la==103:
                self.state = 505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 498
                    self.function()
                    pass

                elif la_ == 2:
                    self.state = 499
                    self.property_()
                    pass

                elif la_ == 3:
                    self.state = 500
                    self.field()
                    pass

                elif la_ == 4:
                    self.state = 501
                    self.classDeclaration()
                    pass

                elif la_ == 5:
                    self.state = 502
                    self.interfaceDeclaration()
                    pass

                elif la_ == 6:
                    self.state = 503
                    self.structureDeclaration()
                    pass

                elif la_ == 7:
                    self.state = 504
                    self.enumDeclaration()
                    pass


                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 507
                    self.semicolon()


                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FunctionContext)
            else:
                return self.getTypedRuleContext(GosuParser.FunctionContext,i)


        def constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ConstructorContext)
            else:
                return self.getTypedRuleContext(GosuParser.ConstructorContext,i)


        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.PropertyContext)
            else:
                return self.getTypedRuleContext(GosuParser.PropertyContext,i)


        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.FieldContext)
            else:
                return self.getTypedRuleContext(GosuParser.FieldContext,i)


        def delegate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.DelegateContext)
            else:
                return self.getTypedRuleContext(GosuParser.DelegateContext,i)


        def classDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ClassDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.ClassDeclarationContext,i)


        def interfaceDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.InterfaceDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.InterfaceDeclarationContext,i)


        def structureDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.StructureDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.StructureDeclarationContext,i)


        def enumDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.EnumDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.EnumDeclarationContext,i)


        def defaultValueFunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.DefaultValueFunctionContext)
            else:
                return self.getTypedRuleContext(GosuParser.DefaultValueFunctionContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.SemicolonContext)
            else:
                return self.getTypedRuleContext(GosuParser.SemicolonContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_annotationMembers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMembers" ):
                listener.enterAnnotationMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMembers" ):
                listener.exitAnnotationMembers(self)




    def annotationMembers(self):

        localctx = GosuParser.AnnotationMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_annotationMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 74924308685933578) != 0) or _la==64 or _la==103:
                self.state = 525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 515
                    self.function()
                    pass

                elif la_ == 2:
                    self.state = 516
                    self.constructor()
                    pass

                elif la_ == 3:
                    self.state = 517
                    self.property_()
                    pass

                elif la_ == 4:
                    self.state = 518
                    self.field()
                    pass

                elif la_ == 5:
                    self.state = 519
                    self.delegate()
                    pass

                elif la_ == 6:
                    self.state = 520
                    self.classDeclaration()
                    pass

                elif la_ == 7:
                    self.state = 521
                    self.interfaceDeclaration()
                    pass

                elif la_ == 8:
                    self.state = 522
                    self.structureDeclaration()
                    pass

                elif la_ == 9:
                    self.state = 523
                    self.enumDeclaration()
                    pass

                elif la_ == 10:
                    self.state = 524
                    self.defaultValueFunction()
                    pass


                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 527
                    self.semicolon()


                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSignature(self):
            return self.getTypedRuleContext(GosuParser.FunctionSignatureContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(GosuParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)




    def function(self):

        localctx = GosuParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.functionSignature()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 536
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorSignature(self):
            return self.getTypedRuleContext(GosuParser.ConstructorSignatureContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(GosuParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor" ):
                listener.enterConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor" ):
                listener.exitConstructor(self)




    def constructor(self):

        localctx = GosuParser.ConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_constructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.constructorSignature()
            self.state = 540
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertySignature(self):
            return self.getTypedRuleContext(GosuParser.PropertySignatureContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(GosuParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)




    def property_(self):

        localctx = GosuParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.propertySignature()
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 543
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSignature(self):
            return self.getTypedRuleContext(GosuParser.FunctionSignatureContext,0)


        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def statement(self):
            return self.getTypedRuleContext(GosuParser.StatementContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_defaultValueFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueFunction" ):
                listener.enterDefaultValueFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueFunction" ):
                listener.exitDefaultValueFunction(self)




    def defaultValueFunction(self):

        localctx = GosuParser.DefaultValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_defaultValueFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.functionSignature()
            self.state = 547
            self.match(GosuParser.EQUALS)
            self.state = 548
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(GosuParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GosuParser.TypeParametersContext,0)


        def parameterDeclarationList(self):
            return self.getTypedRuleContext(GosuParser.ParameterDeclarationListContext,0)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_functionSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSignature" ):
                listener.enterFunctionSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSignature" ):
                listener.exitFunctionSignature(self)




    def functionSignature(self):

        localctx = GosuParser.FunctionSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_functionSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 550
                self.modifiers()


            self.state = 553
            self.match(GosuParser.FUNCTION)
            self.state = 554
            self.identifier()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 555
                self.typeParameters()


            self.state = 558
            self.match(GosuParser.LPAREN)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 167509525037975674) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 18014673387388929) != 0):
                self.state = 559
                self.parameterDeclarationList()


            self.state = 562
            self.match(GosuParser.RPAREN)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 563
                self.match(GosuParser.COLON)
                self.state = 564
                self.typeLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCT(self):
            return self.getToken(GosuParser.CONSTRUCT, 0)

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def parameterDeclarationList(self):
            return self.getTypedRuleContext(GosuParser.ParameterDeclarationListContext,0)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_constructorSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorSignature" ):
                listener.enterConstructorSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorSignature" ):
                listener.exitConstructorSignature(self)




    def constructorSignature(self):

        localctx = GosuParser.ConstructorSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_constructorSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 567
                self.modifiers()


            self.state = 570
            self.match(GosuParser.CONSTRUCT)
            self.state = 571
            self.match(GosuParser.LPAREN)
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 167509525037975674) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 18014673387388929) != 0):
                self.state = 572
                self.parameterDeclarationList()


            self.state = 575
            self.match(GosuParser.RPAREN)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 576
                self.match(GosuParser.COLON)
                self.state = 577
                self.typeLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(GosuParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = GosuParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.StatementContext)
            else:
                return self.getTypedRuleContext(GosuParser.StatementContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_statementBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementBlock" ):
                listener.enterStatementBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementBlock" ):
                listener.exitStatementBlock(self)




    def statementBlock(self):

        localctx = GosuParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statementBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(GosuParser.LBRACE)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -6415486389383948038) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1116899306805924175) != 0):
                self.state = 583
                self.statement()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 589
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignStatement(self):
            return self.getTypedRuleContext(GosuParser.AssignStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(GosuParser.IfStatementContext,0)


        def tryCatchFinallyStatement(self):
            return self.getTypedRuleContext(GosuParser.TryCatchFinallyStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(GosuParser.ThrowStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(GosuParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(GosuParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(GosuParser.ReturnStatementContext,0)


        def forEachStatement(self):
            return self.getTypedRuleContext(GosuParser.ForEachStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(GosuParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(GosuParser.DoWhileStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(GosuParser.SwitchStatementContext,0)


        def usingStatement(self):
            return self.getTypedRuleContext(GosuParser.UsingStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(GosuParser.AssertStatementContext,0)


        def localVarStatement(self):
            return self.getTypedRuleContext(GosuParser.LocalVarStatementContext,0)


        def statementBlock(self):
            return self.getTypedRuleContext(GosuParser.StatementBlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def semicolon(self):
            return self.getTypedRuleContext(GosuParser.SemicolonContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = GosuParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_statement)
        try:
            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 4, 5, 6, 7, 11, 12, 15, 17, 19, 21, 22, 24, 25, 27, 28, 31, 33, 34, 35, 36, 40, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 61, 63, 64, 65, 66, 67, 70, 72, 82, 83, 95, 105, 106, 119, 120, 121, 122, 123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 591
                    self.assignStatement()
                    pass

                elif la_ == 2:
                    self.state = 592
                    self.ifStatement()
                    pass

                elif la_ == 3:
                    self.state = 593
                    self.tryCatchFinallyStatement()
                    pass

                elif la_ == 4:
                    self.state = 594
                    self.throwStatement()
                    pass

                elif la_ == 5:
                    self.state = 595
                    self.continueStatement()
                    pass

                elif la_ == 6:
                    self.state = 596
                    self.breakStatement()
                    pass

                elif la_ == 7:
                    self.state = 597
                    self.returnStatement()
                    pass

                elif la_ == 8:
                    self.state = 598
                    self.forEachStatement()
                    pass

                elif la_ == 9:
                    self.state = 599
                    self.whileStatement()
                    pass

                elif la_ == 10:
                    self.state = 600
                    self.doWhileStatement()
                    pass

                elif la_ == 11:
                    self.state = 601
                    self.switchStatement()
                    pass

                elif la_ == 12:
                    self.state = 602
                    self.usingStatement()
                    pass

                elif la_ == 13:
                    self.state = 603
                    self.assertStatement()
                    pass

                elif la_ == 14:
                    self.state = 604
                    self.localVarStatement()
                    pass

                elif la_ == 15:
                    self.state = 605
                    self.statementBlock()
                    pass

                elif la_ == 16:
                    self.state = 606
                    self.expression(0)
                    pass


                self.state = 610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 609
                    self.semicolon()


                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.semicolon()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(GosuParser.IF, 0)

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(GosuParser.StatementContext,0)


        def semicolon(self):
            return self.getTypedRuleContext(GosuParser.SemicolonContext,0)


        def elseStatement(self):
            return self.getTypedRuleContext(GosuParser.ElseStatementContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = GosuParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(GosuParser.IF)
            self.state = 616
            self.match(GosuParser.LPAREN)
            self.state = 617
            self.expression(0)
            self.state = 618
            self.match(GosuParser.RPAREN)
            self.state = 619
            self.statement()
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 620
                self.semicolon()


            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 623
                self.elseStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(GosuParser.ELSE, 0)

        def statement(self):
            return self.getTypedRuleContext(GosuParser.StatementContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = GosuParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(GosuParser.ELSE)
            self.state = 627
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchFinallyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(GosuParser.TRY, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(GosuParser.StatementBlockContext,0)


        def finallyStatement(self):
            return self.getTypedRuleContext(GosuParser.FinallyStatementContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(GosuParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_tryCatchFinallyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchFinallyStatement" ):
                listener.enterTryCatchFinallyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchFinallyStatement" ):
                listener.exitTryCatchFinallyStatement(self)




    def tryCatchFinallyStatement(self):

        localctx = GosuParser.TryCatchFinallyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tryCatchFinallyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(GosuParser.TRY)
            self.state = 630
            self.statementBlock()
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 632 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 631
                    self.catchClause()
                    self.state = 634 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==9):
                        break

                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 636
                    self.finallyStatement()


                pass
            elif token in [23]:
                self.state = 639
                self.finallyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(GosuParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(GosuParser.StatementBlockContext,0)


        def VAR(self):
            return self.getToken(GosuParser.VAR, 0)

        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = GosuParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(GosuParser.CATCH)
            self.state = 643
            self.match(GosuParser.LPAREN)
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 644
                self.match(GosuParser.VAR)


            self.state = 647
            self.identifier()
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 648
                self.match(GosuParser.COLON)
                self.state = 649
                self.typeLiteral()


            self.state = 652
            self.match(GosuParser.RPAREN)
            self.state = 653
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(GosuParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = GosuParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(GosuParser.THROW)
            self.state = 656
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(GosuParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = GosuParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(GosuParser.RETURN)
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 659
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(GosuParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(GosuParser.StatementContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = GosuParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(GosuParser.WHILE)
            self.state = 663
            self.match(GosuParser.LPAREN)
            self.state = 664
            self.expression(0)
            self.state = 665
            self.match(GosuParser.RPAREN)
            self.state = 666
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(GosuParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(GosuParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(GosuParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = GosuParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(GosuParser.DO)
            self.state = 669
            self.statement()
            self.state = 670
            self.match(GosuParser.WHILE)
            self.state = 671
            self.match(GosuParser.LPAREN)
            self.state = 672
            self.expression(0)
            self.state = 673
            self.match(GosuParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GosuParser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def switchBlockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.SwitchBlockStatementContext)
            else:
                return self.getTypedRuleContext(GosuParser.SwitchBlockStatementContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = GosuParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(GosuParser.SWITCH)
            self.state = 676
            self.match(GosuParser.LPAREN)
            self.state = 677
            self.expression(0)
            self.state = 678
            self.match(GosuParser.RPAREN)
            self.state = 679
            self.match(GosuParser.LBRACE)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8 or _la==13:
                self.state = 680
                self.switchBlockStatement()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 686
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseOrDefaultStatement(self):
            return self.getTypedRuleContext(GosuParser.CaseOrDefaultStatementContext,0)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.StatementContext)
            else:
                return self.getTypedRuleContext(GosuParser.StatementContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_switchBlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatement" ):
                listener.enterSwitchBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatement" ):
                listener.exitSwitchBlockStatement(self)




    def switchBlockStatement(self):

        localctx = GosuParser.SwitchBlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_switchBlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.caseOrDefaultStatement()
            self.state = 689
            self.match(GosuParser.COLON)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -6415486389383948038) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1116899306805924175) != 0):
                self.state = 690
                self.statement()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseOrDefaultStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GosuParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(GosuParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_caseOrDefaultStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseOrDefaultStatement" ):
                listener.enterCaseOrDefaultStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseOrDefaultStatement" ):
                listener.exitCaseOrDefaultStatement(self)




    def caseOrDefaultStatement(self):

        localctx = GosuParser.CaseOrDefaultStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_caseOrDefaultStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.state = 696
                self.match(GosuParser.CASE)
                self.state = 697
                self.expression(0)
                pass
            elif token in [13]:
                self.state = 698
                self.match(GosuParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(GosuParser.USING, 0)

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(GosuParser.StatementBlockContext,0)


        def localVarStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.LocalVarStatementContext)
            else:
                return self.getTypedRuleContext(GosuParser.LocalVarStatementContext,i)


        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def finallyStatement(self):
            return self.getTypedRuleContext(GosuParser.FinallyStatementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_usingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStatement" ):
                listener.enterUsingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStatement" ):
                listener.exitUsingStatement(self)




    def usingStatement(self):

        localctx = GosuParser.UsingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_usingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(GosuParser.USING)
            self.state = 702
            self.match(GosuParser.LPAREN)
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 703
                self.localVarStatement()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 704
                    self.match(GosuParser.COMMA)
                    self.state = 705
                    self.localVarStatement()
                    self.state = 710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 711
                self.expression(0)
                pass


            self.state = 714
            self.match(GosuParser.RPAREN)
            self.state = 715
            self.statementBlock()
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 716
                self.finallyStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(GosuParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_assertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStatement" ):
                listener.enterAssertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStatement" ):
                listener.exitAssertStatement(self)




    def assertStatement(self):

        localctx = GosuParser.AssertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_assertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(GosuParser.ASSERT)
            self.state = 720
            self.expression(0)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 721
                self.match(GosuParser.COLON)
                self.state = 722
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVarStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(GosuParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def FINAL(self):
            return self.getToken(GosuParser.FINAL, 0)

        def optionalType(self):
            return self.getTypedRuleContext(GosuParser.OptionalTypeContext,0)


        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_localVarStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVarStatement" ):
                listener.enterLocalVarStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVarStatement" ):
                listener.exitLocalVarStatement(self)




    def localVarStatement(self):

        localctx = GosuParser.LocalVarStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_localVarStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 725
                self.match(GosuParser.FINAL)


            self.state = 728
            self.match(GosuParser.VAR)
            self.state = 729
            self.identifier()
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 730
                self.optionalType()


            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 733
                self.match(GosuParser.EQUALS)
                self.state = 734
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(GosuParser.BREAK, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = GosuParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(GosuParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(GosuParser.CONTINUE, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = GosuParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(GosuParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)


        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def ADD_ASSIGN(self):
            return self.getToken(GosuParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(GosuParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(GosuParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(GosuParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(GosuParser.AND_ASSIGN, 0)

        def LOGICAL_AND_ASSIGN(self):
            return self.getToken(GosuParser.LOGICAL_AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(GosuParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(GosuParser.XOR_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(GosuParser.MOD_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(GosuParser.LSHIFT_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(GosuParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(GosuParser.URSHIFT_ASSIGN, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_assignStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStatement" ):
                listener.enterAssignStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStatement" ):
                listener.exitAssignStatement(self)




    def assignStatement(self):

        localctx = GosuParser.AssignStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_assignStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.expression(0)
            self.state = 742
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1099243192321) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 743
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(GosuParser.StatementContext,0)


        def FOREACH(self):
            return self.getToken(GosuParser.FOREACH, 0)

        def FOR(self):
            return self.getToken(GosuParser.FOR, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(GosuParser.IN, 0)

        def indexVar(self):
            return self.getTypedRuleContext(GosuParser.IndexVarContext,0)


        def VAR(self):
            return self.getToken(GosuParser.VAR, 0)

        def indexRest(self):
            return self.getTypedRuleContext(GosuParser.IndexRestContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_forEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)




    def forEachStatement(self):

        localctx = GosuParser.ForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forEachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            _la = self._input.LA(1)
            if not(_la==24 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 746
            self.match(GosuParser.LPAREN)
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 747
                self.expression(0)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 748
                    self.indexVar()


                pass

            elif la_ == 2:
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 751
                    self.match(GosuParser.VAR)


                self.state = 754
                self.identifier()
                self.state = 755
                self.match(GosuParser.IN)
                self.state = 756
                self.expression(0)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31 or _la==34:
                    self.state = 757
                    self.indexRest()


                pass


            self.state = 762
            self.match(GosuParser.RPAREN)
            self.state = 763
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(GosuParser.FINALLY, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(GosuParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_finallyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyStatement" ):
                listener.enterFinallyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyStatement" ):
                listener.exitFinallyStatement(self)




    def finallyStatement(self):

        localctx = GosuParser.FinallyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_finallyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(GosuParser.FINALLY)
            self.state = 766
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexVar(self):
            return self.getTypedRuleContext(GosuParser.IndexVarContext,0)


        def iteratorVar(self):
            return self.getTypedRuleContext(GosuParser.IteratorVarContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_indexRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRest" ):
                listener.enterIndexRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRest" ):
                listener.exitIndexRest(self)




    def indexRest(self):

        localctx = GosuParser.IndexRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_indexRest)
        try:
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.indexVar()
                self.state = 769
                self.iteratorVar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.iteratorVar()
                self.state = 772
                self.indexVar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 774
                self.indexVar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 775
                self.iteratorVar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(GosuParser.INDEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_indexVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexVar" ):
                listener.enterIndexVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexVar" ):
                listener.exitIndexVar(self)




    def indexVar(self):

        localctx = GosuParser.IndexVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_indexVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(GosuParser.INDEX)
            self.state = 779
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATOR(self):
            return self.getToken(GosuParser.ITERATOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_iteratorVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorVar" ):
                listener.enterIteratorVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorVar" ):
                listener.exitIteratorVar(self)




    def iteratorVar(self):

        localctx = GosuParser.IteratorVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_iteratorVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(GosuParser.ITERATOR)
            self.state = 782
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY(self):
            return self.getToken(GosuParser.PROPERTY, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def GET(self):
            return self.getToken(GosuParser.GET, 0)

        def SET(self):
            return self.getToken(GosuParser.SET, 0)

        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def parameterDeclarationList(self):
            return self.getTypedRuleContext(GosuParser.ParameterDeclarationListContext,0)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_propertySignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySignature" ):
                listener.enterPropertySignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySignature" ):
                listener.exitPropertySignature(self)




    def propertySignature(self):

        localctx = GosuParser.PropertySignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_propertySignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 784
                self.modifiers()


            self.state = 787
            self.match(GosuParser.PROPERTY)
            self.state = 788
            _la = self._input.LA(1)
            if not(_la==27 or _la==48):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 789
            self.identifier()
            self.state = 790
            self.match(GosuParser.LPAREN)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 167509525037975674) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 18014673387388929) != 0):
                self.state = 791
                self.parameterDeclarationList()


            self.state = 794
            self.match(GosuParser.RPAREN)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 795
                self.match(GosuParser.COLON)
                self.state = 796
                self.typeLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(GosuParser.VAR, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(GosuParser.IdentifierContext,i)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def optionalType(self):
            return self.getTypedRuleContext(GosuParser.OptionalTypeContext,0)


        def AS(self):
            return self.getToken(GosuParser.AS, 0)

        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def READONLY(self):
            return self.getToken(GosuParser.READONLY, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField" ):
                listener.enterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField" ):
                listener.exitField(self)




    def field(self):

        localctx = GosuParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 799
                self.modifiers()


            self.state = 802
            self.match(GosuParser.VAR)
            self.state = 803
            self.identifier()
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70 or _la==86:
                self.state = 804
                self.optionalType()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 807
                self.match(GosuParser.AS)
                self.state = 809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 808
                    self.match(GosuParser.READONLY)


                self.state = 811
                self.identifier()


            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 814
                self.match(GosuParser.EQUALS)
                self.state = 815
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(GosuParser.DELEGATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def delegateStatement(self):
            return self.getTypedRuleContext(GosuParser.DelegateStatementContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(GosuParser.ModifiersContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_delegate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate" ):
                listener.enterDelegate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate" ):
                listener.exitDelegate(self)




    def delegate(self):

        localctx = GosuParser.DelegateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_delegate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72670305486635018) != 0) or _la==103:
                self.state = 818
                self.modifiers()


            self.state = 821
            self.match(GosuParser.DELEGATE)
            self.state = 822
            self.identifier()
            self.state = 823
            self.delegateStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPRESENTS(self):
            return self.getToken(GosuParser.REPRESENTS, 0)

        def typeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.TypeLiteralContext)
            else:
                return self.getTypedRuleContext(GosuParser.TypeLiteralContext,i)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_delegateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegateStatement" ):
                listener.enterDelegateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegateStatement" ):
                listener.exitDelegateStatement(self)




    def delegateStatement(self):

        localctx = GosuParser.DelegateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_delegateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 825
                self.match(GosuParser.COLON)
                self.state = 826
                self.typeLiteral()


            self.state = 829
            self.match(GosuParser.REPRESENTS)
            self.state = 830
            self.typeLiteral()
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 831
                self.match(GosuParser.COMMA)
                self.state = 832
                self.typeLiteral()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 838
                self.match(GosuParser.EQUALS)
                self.state = 839
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(GosuParser.AnnotationContext,i)


        def ANNOTATION(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.ANNOTATION)
            else:
                return self.getToken(GosuParser.ANNOTATION, i)

        def PRIVATE(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.PRIVATE)
            else:
                return self.getToken(GosuParser.PRIVATE, i)

        def INTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.INTERNAL)
            else:
                return self.getToken(GosuParser.INTERNAL, i)

        def PROTECTED(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.PROTECTED)
            else:
                return self.getToken(GosuParser.PROTECTED, i)

        def PUBLIC(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.PUBLIC)
            else:
                return self.getToken(GosuParser.PUBLIC, i)

        def STATIC(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.STATIC)
            else:
                return self.getToken(GosuParser.STATIC, i)

        def ABSTRACT(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.ABSTRACT)
            else:
                return self.getToken(GosuParser.ABSTRACT, i)

        def OVERRIDE(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.OVERRIDE)
            else:
                return self.getToken(GosuParser.OVERRIDE, i)

        def FINAL(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.FINAL)
            else:
                return self.getToken(GosuParser.FINAL, i)

        def TRANSIENT(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.TRANSIENT)
            else:
                return self.getToken(GosuParser.TRANSIENT, i)

        def REIFIED(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.REIFIED)
            else:
                return self.getToken(GosuParser.REIFIED, i)

        def getRuleIndex(self):
            return GosuParser.RULE_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifiers" ):
                listener.enterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifiers" ):
                listener.exitModifiers(self)




    def modifiers(self):

        localctx = GosuParser.ModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 854
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [103]:
                        self.state = 842
                        self.annotation()
                        pass
                    elif token in [3]:
                        self.state = 843
                        self.match(GosuParser.ANNOTATION)
                        pass
                    elif token in [40]:
                        self.state = 844
                        self.match(GosuParser.PRIVATE)
                        pass
                    elif token in [33]:
                        self.state = 845
                        self.match(GosuParser.INTERNAL)
                        pass
                    elif token in [42]:
                        self.state = 846
                        self.match(GosuParser.PROTECTED)
                        pass
                    elif token in [43]:
                        self.state = 847
                        self.match(GosuParser.PUBLIC)
                        pass
                    elif token in [49]:
                        self.state = 848
                        self.match(GosuParser.STATIC)
                        pass
                    elif token in [1]:
                        self.state = 849
                        self.match(GosuParser.ABSTRACT)
                        pass
                    elif token in [38]:
                        self.state = 850
                        self.match(GosuParser.OVERRIDE)
                        pass
                    elif token in [22]:
                        self.state = 851
                        self.match(GosuParser.FINAL)
                        pass
                    elif token in [56]:
                        self.state = 852
                        self.match(GosuParser.TRANSIENT)
                        pass
                    elif token in [45]:
                        self.state = 853
                        self.match(GosuParser.REIFIED)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 856 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace(self):
            return self.getTypedRuleContext(GosuParser.NamespaceContext,0)


        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(GosuParser.TypeArgumentsContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.DOT)
            else:
                return self.getToken(GosuParser.DOT, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(GosuParser.IdentifierContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = GosuParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.namespace()
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 859
                self.typeArguments()


            self.state = 868
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 862
                    self.match(GosuParser.DOT)
                    self.state = 863
                    self.identifier()
                    self.state = 864
                    self.typeArguments() 
                self.state = 870
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(GosuParser.ParameterDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_parameterDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclarationList" ):
                listener.enterParameterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclarationList" ):
                listener.exitParameterDeclarationList(self)




    def parameterDeclarationList(self):

        localctx = GosuParser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_parameterDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.parameterDeclaration()
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 872
                self.match(GosuParser.COMMA)
                self.state = 873
                self.parameterDeclaration()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def blockType(self):
            return self.getTypedRuleContext(GosuParser.BlockTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(GosuParser.AnnotationContext,i)


        def FINAL(self):
            return self.getToken(GosuParser.FINAL, 0)

        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def blockLiteral(self):
            return self.getTypedRuleContext(GosuParser.BlockLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = GosuParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 879
                self.annotation()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 885
                self.match(GosuParser.FINAL)


            self.state = 890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 888
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 889
                self.blockType()
                pass


            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 892
                self.match(GosuParser.COLON)
                self.state = 895
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 3, 4, 5, 6, 11, 17, 21, 22, 27, 31, 33, 34, 40, 42, 43, 44, 48, 49, 52, 54, 57, 65, 119]:
                    self.state = 893
                    self.typeLiteral()
                    pass
                elif token in [70]:
                    self.state = 894
                    self.blockLiteral()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 899
                self.match(GosuParser.EQUALS)
                self.state = 900
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockLiteral(self):
            return self.getTypedRuleContext(GosuParser.BlockLiteralContext,0)


        def BLOCK(self):
            return self.getToken(GosuParser.BLOCK, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_blockType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockType" ):
                listener.enterBlockType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockType" ):
                listener.exitBlockType(self)




    def blockType(self):

        localctx = GosuParser.BlockTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_blockType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.state = 903
                self.match(GosuParser.BLOCK)
                pass
            elif token in [1, 3, 4, 5, 11, 17, 21, 22, 27, 31, 33, 34, 40, 42, 43, 44, 48, 49, 52, 54, 57, 65, 119]:
                self.state = 904
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 907
            self.blockLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(GosuParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(GosuParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(GosuParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = GosuParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(GosuParser.LT)
            self.state = 910
            self.typeParameter()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 911
                self.match(GosuParser.COMMA)
                self.state = 912
                self.typeParameter()
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 918
            self.match(GosuParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def EXTENDS(self):
            return self.getToken(GosuParser.EXTENDS, 0)

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = GosuParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.identifier()
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 921
                self.match(GosuParser.EXTENDS)
                self.state = 922
                self.typeLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(GosuParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(GosuParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(GosuParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = GosuParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(GosuParser.LT)
            self.state = 926
            self.typeArgument()
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 927
                self.match(GosuParser.COMMA)
                self.state = 928
                self.typeArgument()
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 934
            self.match(GosuParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def QUESTION(self):
            return self.getToken(GosuParser.QUESTION, 0)

        def EXTENDS(self):
            return self.getToken(GosuParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(GosuParser.SUPER, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = GosuParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 4, 5, 6, 11, 17, 21, 22, 27, 31, 33, 34, 40, 42, 43, 44, 48, 49, 52, 54, 57, 65, 119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.typeLiteral()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.match(GosuParser.QUESTION)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or _la==52:
                    self.state = 938
                    _la = self._input.LA(1)
                    if not(_la==20 or _la==52):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 939
                    self.typeLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def blockLiteral(self):
            return self.getTypedRuleContext(GosuParser.BlockLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_optionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalType" ):
                listener.enterOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalType" ):
                listener.exitOptionalType(self)




    def optionalType(self):

        localctx = GosuParser.OptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_optionalType)
        try:
            self.state = 947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.match(GosuParser.COLON)
                self.state = 945
                self.typeLiteral()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 946
                self.blockLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.TypeContext)
            else:
                return self.getTypedRuleContext(GosuParser.TypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.BITAND)
            else:
                return self.getToken(GosuParser.BITAND, i)

        def getRuleIndex(self):
            return GosuParser.RULE_typeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLiteral" ):
                listener.enterTypeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLiteral" ):
                listener.exitTypeLiteral(self)




    def typeLiteral(self):

        localctx = GosuParser.TypeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_typeLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.type_()
            self.state = 954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 950
                    self.match(GosuParser.BITAND)
                    self.state = 951
                    self.type_() 
                self.state = 956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(GosuParser.ClassOrInterfaceTypeContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.LBRACK)
            else:
                return self.getToken(GosuParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.RBRACK)
            else:
                return self.getToken(GosuParser.RBRACK, i)

        def BLOCK(self):
            return self.getToken(GosuParser.BLOCK, 0)

        def blockLiteral(self):
            return self.getTypedRuleContext(GosuParser.BlockLiteralContext,0)


        def VOID(self):
            return self.getToken(GosuParser.VOID, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = GosuParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_type)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.classOrInterfaceType()
                self.state = 962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 958
                        self.match(GosuParser.LBRACK)
                        self.state = 959
                        self.match(GosuParser.RBRACK) 
                    self.state = 964
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.match(GosuParser.BLOCK)
                self.state = 966
                self.blockLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.match(GosuParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def blockLiteralArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.BlockLiteralArgContext)
            else:
                return self.getTypedRuleContext(GosuParser.BlockLiteralArgContext,i)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_blockLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLiteral" ):
                listener.enterBlockLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLiteral" ):
                listener.exitBlockLiteral(self)




    def blockLiteral(self):

        localctx = GosuParser.BlockLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_blockLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(GosuParser.LPAREN)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 167509525037975674) != 0) or _la==65 or _la==119:
                self.state = 971
                self.blockLiteralArg()
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 972
                    self.match(GosuParser.COMMA)
                    self.state = 973
                    self.blockLiteralArg()
                    self.state = 978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 981
            self.match(GosuParser.RPAREN)
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 982
                self.match(GosuParser.COLON)
                self.state = 983
                self.typeLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLiteralArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def blockLiteral(self):
            return self.getTypedRuleContext(GosuParser.BlockLiteralContext,0)


        def typeLiteral(self):
            return self.getTypedRuleContext(GosuParser.TypeLiteralContext,0)


        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_blockLiteralArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLiteralArg" ):
                listener.enterBlockLiteralArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLiteralArg" ):
                listener.exitBlockLiteralArg(self)




    def blockLiteralArg(self):

        localctx = GosuParser.BlockLiteralArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_blockLiteralArg)
        self._la = 0 # Token type
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.identifier()
                self.state = 990
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [79]:
                    self.state = 987
                    self.match(GosuParser.EQUALS)
                    self.state = 988
                    self.expression(0)
                    pass
                elif token in [70]:
                    self.state = 989
                    self.blockLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 992
                    self.identifier()
                    self.state = 993
                    self.match(GosuParser.COLON)


                self.state = 997
                self.typeLiteral()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 998
                    self.match(GosuParser.EQUALS)
                    self.state = 999
                    self.expression(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def argExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ArgExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ArgExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = GosuParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(GosuParser.LPAREN)
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2474478537238251642) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 558449653405057189) != 0):
                self.state = 1005
                self.argExpression()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 1006
                    self.match(GosuParser.COMMA)
                    self.state = 1007
                    self.argExpression()
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1015
            self.match(GosuParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedArgumentExpression(self):
            return self.getTypedRuleContext(GosuParser.NamedArgumentExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def assignStatement(self):
            return self.getTypedRuleContext(GosuParser.AssignStatementContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_argExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgExpression" ):
                listener.enterArgExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgExpression" ):
                listener.exitArgExpression(self)




    def argExpression(self):

        localctx = GosuParser.ArgExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_argExpression)
        try:
            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.namedArgumentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1018
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1019
                self.assignStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_namedArgumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgumentExpression" ):
                listener.enterNamedArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgumentExpression" ):
                listener.exitNamedArgumentExpression(self)




    def namedArgumentExpression(self):

        localctx = GosuParser.NamedArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_namedArgumentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(GosuParser.COLON)
            self.state = 1023
            self.identifier()
            self.state = 1024
            self.match(GosuParser.EQUALS)
            self.state = 1025
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GosuParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrimaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(GosuParser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)


    class IntervalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def INTERVALOP(self):
            return self.getToken(GosuParser.INTERVALOP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpression" ):
                listener.enterIntervalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpression" ):
                listener.exitIntervalExpression(self)


    class MemberAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def DOT(self):
            return self.getToken(GosuParser.DOT, 0)
        def QUESTION(self):
            return self.getToken(GosuParser.QUESTION, 0)
        def MUL(self):
            return self.getToken(GosuParser.MUL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)


    class LambdaExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaSignature(self):
            return self.getTypedRuleContext(GosuParser.LambdaSignatureContext,0)

        def lambdaBody(self):
            return self.getTypedRuleContext(GosuParser.LambdaBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)


    class TypeCastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def TYPEAS(self):
            return self.getToken(GosuParser.TYPEAS, 0)
        def AS(self):
            return self.getToken(GosuParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeCastExpression" ):
                listener.enterTypeCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeCastExpression" ):
                listener.exitTypeCastExpression(self)


    class RelationalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def EQUAL(self):
            return self.getToken(GosuParser.EQUAL, 0)
        def GT(self):
            return self.getToken(GosuParser.GT, 0)
        def LT(self):
            return self.getToken(GosuParser.LT, 0)
        def LE(self):
            return self.getToken(GosuParser.LE, 0)
        def greaterEqual(self):
            return self.getTypedRuleContext(GosuParser.GreaterEqualContext,0)

        def NOTEQUAL(self):
            return self.getToken(GosuParser.NOTEQUAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)


    class NewExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(GosuParser.NEW, 0)
        def classOrInterfaceType(self):
            return self.getTypedRuleContext(GosuParser.ClassOrInterfaceTypeContext,0)

        def arguments(self):
            return self.getTypedRuleContext(GosuParser.ArgumentsContext,0)

        def arrayCreator(self):
            return self.getTypedRuleContext(GosuParser.ArrayCreatorContext,0)

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)
        def initializer(self):
            return self.getTypedRuleContext(GosuParser.InitializerContext,0)

        def anonymousInnerClass(self):
            return self.getTypedRuleContext(GosuParser.AnonymousInnerClassContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)


    class EvalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EVAL(self):
            return self.getToken(GosuParser.EVAL, 0)
        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvalExpression" ):
                listener.enterEvalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvalExpression" ):
                listener.exitEvalExpression(self)


    class MultiplicationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def MUL(self):
            return self.getToken(GosuParser.MUL, 0)
        def DIV(self):
            return self.getToken(GosuParser.DIV, 0)
        def MOD(self):
            return self.getToken(GosuParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicationExpression" ):
                listener.enterMultiplicationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicationExpression" ):
                listener.exitMultiplicationExpression(self)


    class SafeTernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def QUESTION_COLON(self):
            return self.getToken(GosuParser.QUESTION_COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeTernaryExpression" ):
                listener.enterSafeTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeTernaryExpression" ):
                listener.exitSafeTernaryExpression(self)


    class ThisSuperExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)

        def THIS(self):
            return self.getToken(GosuParser.THIS, 0)
        def SUPER(self):
            return self.getToken(GosuParser.SUPER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisSuperExpression" ):
                listener.enterThisSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisSuperExpression" ):
                listener.exitThisSuperExpression(self)


    class UnaryExpressionNotContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)

        def TILDE(self):
            return self.getToken(GosuParser.TILDE, 0)
        def EXCLAMATION(self):
            return self.getToken(GosuParser.EXCLAMATION, 0)
        def NOT(self):
            return self.getToken(GosuParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionNot" ):
                listener.enterUnaryExpressionNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionNot" ):
                listener.exitUnaryExpressionNot(self)


    class BitwiseExpressisonContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.LT)
            else:
                return self.getToken(GosuParser.LT, i)
        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.GT)
            else:
                return self.getToken(GosuParser.GT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseExpressison" ):
                listener.enterBitwiseExpressison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseExpressison" ):
                listener.exitBitwiseExpressison(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(GosuParser.AND, 0)
        def OR(self):
            return self.getToken(GosuParser.OR, 0)
        def CONJ(self):
            return self.getToken(GosuParser.CONJ, 0)
        def DISJ(self):
            return self.getToken(GosuParser.DISJ, 0)
        def BITAND(self):
            return self.getToken(GosuParser.BITAND, 0)
        def BITOR(self):
            return self.getToken(GosuParser.BITOR, 0)
        def CARET(self):
            return self.getToken(GosuParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class TypeisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)

        def TYPEIS(self):
            return self.getToken(GosuParser.TYPEIS, 0)
        def type_(self):
            return self.getTypedRuleContext(GosuParser.TypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeisExpression" ):
                listener.enterTypeisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeisExpression" ):
                listener.exitTypeisExpression(self)


    class TypeofExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)

        def TYPEOF(self):
            return self.getToken(GosuParser.TYPEOF, 0)
        def STATICTYPEOF(self):
            return self.getToken(GosuParser.STATICTYPEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class ElementAccessExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def LBRACK(self):
            return self.getToken(GosuParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(GosuParser.RBRACK, 0)
        def QUESTION(self):
            return self.getToken(GosuParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementAccessExpression" ):
                listener.enterElementAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementAccessExpression" ):
                listener.exitElementAccessExpression(self)


    class UnaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(GosuParser.MINUS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(GosuParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)


    class PreIncrementExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)

        def INC(self):
            return self.getToken(GosuParser.INC, 0)
        def DEC(self):
            return self.getToken(GosuParser.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)

        def QUESTION(self):
            return self.getToken(GosuParser.QUESTION, 0)
        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)


    class MethodCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GosuParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(GosuParser.ArgumentsContext,0)

        def typeArguments(self):
            return self.getTypedRuleContext(GosuParser.TypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GosuParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                localctx = GosuParser.LambdaExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1028
                self.lambdaSignature()
                self.state = 1029
                self.lambdaBody()
                pass

            elif la_ == 2:
                localctx = GosuParser.UnaryExpressionNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1031
                _la = self._input.LA(1)
                if not(((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 211106232532993) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1032
                self.expression(14)
                pass

            elif la_ == 3:
                localctx = GosuParser.PrimaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1033
                self.primary()
                pass

            elif la_ == 4:
                localctx = GosuParser.ThisSuperExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1034
                _la = self._input.LA(1)
                if not(_la==52 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1035
                self.expression(11)
                pass

            elif la_ == 5:
                localctx = GosuParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1036
                self.match(GosuParser.NEW)
                self.state = 1038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1037
                    self.classOrInterfaceType()


                self.state = 1041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1040
                    self.arguments()


                self.state = 1044
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1043
                    self.arrayCreator()


                self.state = 1053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1046
                    self.match(GosuParser.LBRACE)
                    self.state = 1049
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        self.state = 1047
                        self.initializer()
                        pass

                    elif la_ == 2:
                        self.state = 1048
                        self.anonymousInnerClass()
                        pass


                    self.state = 1051
                    self.match(GosuParser.RBRACE)


                pass

            elif la_ == 6:
                localctx = GosuParser.TypeofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1055
                _la = self._input.LA(1)
                if not(_la==50 or _la==61):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1056
                self.expression(7)
                pass

            elif la_ == 7:
                localctx = GosuParser.UnaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1057
                self.match(GosuParser.MINUS)
                self.state = 1058
                self.expression(4)
                pass

            elif la_ == 8:
                localctx = GosuParser.EvalExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1059
                self.match(GosuParser.EVAL)
                self.state = 1060
                self.match(GosuParser.LPAREN)
                self.state = 1061
                self.expression(0)
                self.state = 1062
                self.match(GosuParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1135
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        localctx = GosuParser.MultiplicationExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1066
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1067
                        _la = self._input.LA(1)
                        if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 35) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1068
                        self.expression(23)
                        pass

                    elif la_ == 2:
                        localctx = GosuParser.MemberAccessContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1069
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1071
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==84 or _la==96:
                            self.state = 1070
                            _la = self._input.LA(1)
                            if not(_la==84 or _la==96):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1073
                        self.match(GosuParser.DOT)
                        self.state = 1074
                        self.expression(21)
                        pass

                    elif la_ == 3:
                        localctx = GosuParser.TypeCastExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1075
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1076
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==59):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1077
                        self.expression(20)
                        pass

                    elif la_ == 4:
                        localctx = GosuParser.RelationalExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1078
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1085
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                        if la_ == 1:
                            self.state = 1079
                            self.match(GosuParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 1080
                            self.match(GosuParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1081
                            self.match(GosuParser.LT)
                            pass

                        elif la_ == 4:
                            self.state = 1082
                            self.match(GosuParser.LE)
                            pass

                        elif la_ == 5:
                            self.state = 1083
                            self.greaterEqual()
                            pass

                        elif la_ == 6:
                            self.state = 1084
                            self.match(GosuParser.NOTEQUAL)
                            pass


                        self.state = 1087
                        self.expression(19)
                        pass

                    elif la_ == 5:
                        localctx = GosuParser.BitwiseExpressisonContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1088
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1096
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                        if la_ == 1:
                            self.state = 1089
                            self.match(GosuParser.LT)
                            self.state = 1090
                            self.match(GosuParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1091
                            self.match(GosuParser.GT)
                            self.state = 1092
                            self.match(GosuParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1093
                            self.match(GosuParser.GT)
                            self.state = 1094
                            self.match(GosuParser.GT)
                            self.state = 1095
                            self.match(GosuParser.GT)
                            pass


                        self.state = 1098
                        self.expression(18)
                        pass

                    elif la_ == 6:
                        localctx = GosuParser.SafeTernaryExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1099
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1100
                        self.match(GosuParser.QUESTION_COLON)
                        self.state = 1101
                        self.expression(14)
                        pass

                    elif la_ == 7:
                        localctx = GosuParser.UnaryExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1102
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1103
                        _la = self._input.LA(1)
                        if not(_la==94 or _la==95):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1104
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = GosuParser.LogicalExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1105
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1106
                        _la = self._input.LA(1)
                        if not(_la==2 or _la==37 or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 1795) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1107
                        self.expression(6)
                        pass

                    elif la_ == 9:
                        localctx = GosuParser.TernaryExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1108
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1109
                        self.match(GosuParser.QUESTION)
                        self.state = 1110
                        self.expression(0)
                        self.state = 1111
                        self.match(GosuParser.COLON)
                        self.state = 1112
                        self.expression(3)
                        pass

                    elif la_ == 10:
                        localctx = GosuParser.IntervalExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1114
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1115
                        self.match(GosuParser.INTERVALOP)
                        self.state = 1116
                        self.expression(3)
                        pass

                    elif la_ == 11:
                        localctx = GosuParser.MethodCallContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1117
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1119
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==81:
                            self.state = 1118
                            self.typeArguments()


                        self.state = 1121
                        self.arguments()
                        pass

                    elif la_ == 12:
                        localctx = GosuParser.PreIncrementExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1122
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1123
                        _la = self._input.LA(1)
                        if not(_la==92 or _la==93):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 13:
                        localctx = GosuParser.TypeisExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1124
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1125
                        self.match(GosuParser.TYPEIS)
                        self.state = 1126
                        self.type_()
                        pass

                    elif la_ == 14:
                        localctx = GosuParser.ElementAccessExpressionContext(self, GosuParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1127
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1129
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==84:
                            self.state = 1128
                            self.match(GosuParser.QUESTION)


                        self.state = 1131
                        self.match(GosuParser.LBRACK)
                        self.state = 1132
                        self.expression(0)
                        self.state = 1133
                        self.match(GosuParser.RBRACK)
                        pass

             
                self.state = 1139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AnonymousInnerClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMembers(self):
            return self.getTypedRuleContext(GosuParser.ClassMembersContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_anonymousInnerClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInnerClass" ):
                listener.enterAnonymousInnerClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInnerClass" ):
                listener.exitAnonymousInnerClass(self)




    def anonymousInnerClass(self):

        localctx = GosuParser.AnonymousInnerClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_anonymousInnerClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.classMembers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self):
            return self.getToken(GosuParser.BACKSLASH, 0)

        def ARROW(self):
            return self.getToken(GosuParser.ARROW, 0)

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(GosuParser.ParameterDeclarationListContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_lambdaSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaSignature" ):
                listener.enterLambdaSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaSignature" ):
                listener.exitLambdaSignature(self)




    def lambdaSignature(self):

        localctx = GosuParser.LambdaSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_lambdaSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(GosuParser.BACKSLASH)
            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 167509525037975674) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 18014673387388929) != 0):
                self.state = 1143
                self.parameterDeclarationList()


            self.state = 1146
            self.match(GosuParser.ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def statementBlock(self):
            return self.getTypedRuleContext(GosuParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = GosuParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_lambdaBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1148
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1149
                self.statementBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.LBRACK)
            else:
                return self.getToken(GosuParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.RBRACK)
            else:
                return self.getToken(GosuParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GosuParser.RULE_arrayCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreator" ):
                listener.enterArrayCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreator" ):
                listener.exitArrayCreator(self)




    def arrayCreator(self):

        localctx = GosuParser.ArrayCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_arrayCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1152
                    self.match(GosuParser.LBRACK)
                    self.state = 1154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2474478537238251642) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 558449653402960037) != 0):
                        self.state = 1153
                        self.expression(0)


                    self.state = 1156
                    self.match(GosuParser.RBRACK)

                else:
                    raise NoViableAltException(self)
                self.state = 1159 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerExpression(self):
            return self.getTypedRuleContext(GosuParser.InitializerExpressionContext,0)


        def objectInitializer(self):
            return self.getTypedRuleContext(GosuParser.ObjectInitializerContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = GosuParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 4, 5, 6, 11, 17, 19, 21, 22, 27, 31, 33, 34, 35, 36, 40, 42, 43, 44, 48, 49, 50, 52, 54, 57, 61, 65, 67, 70, 72, 82, 83, 95, 105, 106, 119, 120, 121, 122, 123]:
                self.state = 1161
                self.initializerExpression()
                pass
            elif token in [86]:
                self.state = 1162
                self.objectInitializer()
                pass
            elif token in [73]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapInitializerList(self):
            return self.getTypedRuleContext(GosuParser.MapInitializerListContext,0)


        def arrayValueList(self):
            return self.getTypedRuleContext(GosuParser.ArrayValueListContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_initializerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerExpression" ):
                listener.enterInitializerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerExpression" ):
                listener.exitInitializerExpression(self)




    def initializerExpression(self):

        localctx = GosuParser.InitializerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_initializerExpression)
        try:
            self.state = 1167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1165
                self.mapInitializerList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                self.arrayValueList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_arrayValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayValueList" ):
                listener.enterArrayValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayValueList" ):
                listener.exitArrayValueList(self)




    def arrayValueList(self):

        localctx = GosuParser.ArrayValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_arrayValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.expression(0)
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 1170
                self.match(GosuParser.COMMA)
                self.state = 1171
                self.expression(0)
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapInitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GosuParser.ExpressionContext,i)


        def ARROW(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.ARROW)
            else:
                return self.getToken(GosuParser.ARROW, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_mapInitializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapInitializerList" ):
                listener.enterMapInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapInitializerList" ):
                listener.exitMapInitializerList(self)




    def mapInitializerList(self):

        localctx = GosuParser.MapInitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_mapInitializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.expression(0)
            self.state = 1178
            self.match(GosuParser.ARROW)
            self.state = 1179
            self.expression(0)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 1180
                self.match(GosuParser.COMMA)
                self.state = 1181
                self.expression(0)
                self.state = 1182
                self.match(GosuParser.ARROW)
                self.state = 1183
                self.expression(0)
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.InitializerAssignmentContext)
            else:
                return self.getTypedRuleContext(GosuParser.InitializerAssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.COMMA)
            else:
                return self.getToken(GosuParser.COMMA, i)

        def getRuleIndex(self):
            return GosuParser.RULE_objectInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectInitializer" ):
                listener.enterObjectInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectInitializer" ):
                listener.exitObjectInitializer(self)




    def objectInitializer(self):

        localctx = GosuParser.ObjectInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_objectInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.initializerAssignment()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 1191
                self.match(GosuParser.COMMA)
                self.state = 1192
                self.initializerAssignment()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(GosuParser.COLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_initializerAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerAssignment" ):
                listener.enterInitializerAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerAssignment" ):
                listener.exitInitializerAssignment(self)




    def initializerAssignment(self):

        localctx = GosuParser.InitializerAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_initializerAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(GosuParser.COLON)
            self.state = 1199
            self.identifier()
            self.state = 1200
            self.match(GosuParser.EQUALS)
            self.state = 1201
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(GosuParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(GosuParser.IdentifierContext,0)


        def HASH(self):
            return self.getToken(GosuParser.HASH, 0)

        def type_(self):
            return self.getTypedRuleContext(GosuParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(GosuParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(GosuParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(GosuParser.THIS, 0)

        def SUPER(self):
            return self.getToken(GosuParser.SUPER, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = GosuParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 1204
                    self.match(GosuParser.HASH)


                self.state = 1207
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1208
                self.type_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1209
                self.match(GosuParser.LPAREN)
                self.state = 1210
                self.expression(0)
                self.state = 1211
                self.match(GosuParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1213
                self.match(GosuParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1214
                self.match(GosuParser.SUPER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(GosuParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.DOT)
            else:
                return self.getToken(GosuParser.DOT, i)

        def getRuleIndex(self):
            return GosuParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)




    def namespace(self):

        localctx = GosuParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.identifier()
            self.state = 1222
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1218
                    self.match(GosuParser.DOT)
                    self.state = 1219
                    self.identifier() 
                self.state = 1224
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GosuParser.IDENTIFIER, 0)

        def TRUE(self):
            return self.getToken(GosuParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(GosuParser.FALSE, 0)

        def AS(self):
            return self.getToken(GosuParser.AS, 0)

        def INDEX(self):
            return self.getToken(GosuParser.INDEX, 0)

        def ITERATOR(self):
            return self.getToken(GosuParser.ITERATOR, 0)

        def GET(self):
            return self.getToken(GosuParser.GET, 0)

        def SET(self):
            return self.getToken(GosuParser.SET, 0)

        def ASSERT(self):
            return self.getToken(GosuParser.ASSERT, 0)

        def PRIVATE(self):
            return self.getToken(GosuParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(GosuParser.INTERNAL, 0)

        def PROTECTED(self):
            return self.getToken(GosuParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(GosuParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(GosuParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(GosuParser.FINAL, 0)

        def STATIC(self):
            return self.getToken(GosuParser.STATIC, 0)

        def READONLY(self):
            return self.getToken(GosuParser.READONLY, 0)

        def VOID(self):
            return self.getToken(GosuParser.VOID, 0)

        def ENHANCEMENT(self):
            return self.getToken(GosuParser.ENHANCEMENT, 0)

        def CONSTRUCT(self):
            return self.getToken(GosuParser.CONSTRUCT, 0)

        def ANNOTATION(self):
            return self.getToken(GosuParser.ANNOTATION, 0)

        def THIS(self):
            return self.getToken(GosuParser.THIS, 0)

        def SUPER(self):
            return self.getToken(GosuParser.SUPER, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = GosuParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 167509525037975610) != 0) or _la==65 or _la==119):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemicolonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(GosuParser.SEMICOLON)
            else:
                return self.getToken(GosuParser.SEMICOLON, i)

        def getRuleIndex(self):
            return GosuParser.RULE_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon" ):
                listener.enterSemicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon" ):
                listener.exitSemicolon(self)




    def semicolon(self):

        localctx = GosuParser.SemicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_semicolon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1227
                    self.match(GosuParser.SEMICOLON)

                else:
                    raise NoViableAltException(self)
                self.state = 1230 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(GosuParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(GosuParser.StringLiteralContext,0)


        def arrayLiteral(self):
            return self.getTypedRuleContext(GosuParser.ArrayLiteralContext,0)


        def featureLiteral(self):
            return self.getTypedRuleContext(GosuParser.FeatureLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(GosuParser.BooleanLiteralContext,0)


        def mapLiteral(self):
            return self.getTypedRuleContext(GosuParser.MapLiteralContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = GosuParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_literal)
        try:
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1232
                self.numberLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1233
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1234
                self.arrayLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1235
                self.featureLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1236
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1237
                self.mapLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_STRING_DQ(self):
            return self.getToken(GosuParser.OPEN_STRING_DQ, 0)

        def CLOSE_STRING_DQ(self):
            return self.getToken(GosuParser.CLOSE_STRING_DQ, 0)

        def stringPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.StringPartContext)
            else:
                return self.getTypedRuleContext(GosuParser.StringPartContext,i)


        def OPEN_STRING_SQ(self):
            return self.getToken(GosuParser.OPEN_STRING_SQ, 0)

        def CLOSE_STRING_SQ(self):
            return self.getToken(GosuParser.CLOSE_STRING_SQ, 0)

        def CHAR_LITERAL(self):
            return self.getToken(GosuParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = GosuParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.match(GosuParser.OPEN_STRING_DQ)
                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 27) != 0):
                    self.state = 1241
                    self.stringPart()
                    self.state = 1246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1247
                self.match(GosuParser.CLOSE_STRING_DQ)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1248
                self.match(GosuParser.OPEN_STRING_SQ)
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 27) != 0):
                    self.state = 1249
                    self.stringPart()
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1255
                self.match(GosuParser.CLOSE_STRING_SQ)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1256
                self.match(GosuParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolation(self):
            return self.getTypedRuleContext(GosuParser.InterpolationContext,0)


        def SQ_TEXT(self):
            return self.getToken(GosuParser.SQ_TEXT, 0)

        def DQ_TEXT(self):
            return self.getToken(GosuParser.DQ_TEXT, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_stringPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringPart" ):
                listener.enterStringPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringPart" ):
                listener.exitStringPart(self)




    def stringPart(self):

        localctx = GosuParser.StringPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_stringPart)
        try:
            self.state = 1262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127, 130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1259
                self.interpolation()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1260
                self.match(GosuParser.SQ_TEXT)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1261
                self.match(GosuParser.DQ_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterpolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DQ_INTERP(self):
            return self.getToken(GosuParser.DQ_INTERP, 0)

        def expression(self):
            return self.getTypedRuleContext(GosuParser.ExpressionContext,0)


        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def SQ_INTERP(self):
            return self.getToken(GosuParser.SQ_INTERP, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_interpolation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation" ):
                listener.enterInterpolation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation" ):
                listener.exitInterpolation(self)




    def interpolation(self):

        localctx = GosuParser.InterpolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_interpolation)
        try:
            self.state = 1272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1264
                self.match(GosuParser.DQ_INTERP)
                self.state = 1265
                self.expression(0)
                self.state = 1266
                self.match(GosuParser.RBRACE)
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                self.match(GosuParser.SQ_INTERP)
                self.state = 1269
                self.expression(0)
                self.state = 1270
                self.match(GosuParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberLiteral(self):
            return self.getToken(GosuParser.NumberLiteral, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = GosuParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_numberLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(GosuParser.NumberLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def arrayValueList(self):
            return self.getTypedRuleContext(GosuParser.ArrayValueListContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)




    def arrayLiteral(self):

        localctx = GosuParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(GosuParser.LBRACE)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2474478537238251642) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 558449653402960037) != 0):
                self.state = 1277
                self.arrayValueList()


            self.state = 1280
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FeatureLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GosuParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(GosuParser.IdentifierContext,i)


        def HASH(self):
            return self.getToken(GosuParser.HASH, 0)

        def CONSTRUCT(self):
            return self.getToken(GosuParser.CONSTRUCT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(GosuParser.TypeArgumentsContext,0)


        def arguments(self):
            return self.getTypedRuleContext(GosuParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_featureLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFeatureLiteral" ):
                listener.enterFeatureLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFeatureLiteral" ):
                listener.exitFeatureLiteral(self)




    def featureLiteral(self):

        localctx = GosuParser.FeatureLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_featureLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.identifier()
            self.state = 1283
            self.match(GosuParser.HASH)
            self.state = 1286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1284
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 1285
                self.match(GosuParser.CONSTRUCT)
                pass


            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1288
                self.typeArguments()


            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1291
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(GosuParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(GosuParser.FALSE, 0)

        def NULL(self):
            return self.getToken(GosuParser.NULL, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = GosuParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            _la = self._input.LA(1)
            if not(((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 70437463654401) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GosuParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(GosuParser.RBRACE, 0)

        def mapInitializerList(self):
            return self.getTypedRuleContext(GosuParser.MapInitializerListContext,0)


        def getRuleIndex(self):
            return GosuParser.RULE_mapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapLiteral" ):
                listener.enterMapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapLiteral" ):
                listener.exitMapLiteral(self)




    def mapLiteral(self):

        localctx = GosuParser.MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_mapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(GosuParser.LBRACE)
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2474478537238251642) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 558449653402960037) != 0):
                self.state = 1297
                self.mapInitializerList()


            self.state = 1300
            self.match(GosuParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GreaterEqualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(GosuParser.GT, 0)

        def EQUALS(self):
            return self.getToken(GosuParser.EQUALS, 0)

        def getRuleIndex(self):
            return GosuParser.RULE_greaterEqual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreaterEqual" ):
                listener.enterGreaterEqual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreaterEqual" ):
                listener.exitGreaterEqual(self)




    def greaterEqual(self):

        localctx = GosuParser.GreaterEqualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_greaterEqual)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(GosuParser.GT)
            self.state = 1303
            self.match(GosuParser.EQUALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[84] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 5)
         




